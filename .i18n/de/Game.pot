msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Thu May  9 10:33:15 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: de\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Funktion `f` is injektiv wenn:\n"
"\n"
"```\n"
"‚àÄ a b, f a = f b ‚Üí a = b\n"
"```"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Funktion `f` is surjektiv wenn:\n"
"\n"
"```\n"
"‚àÄ a, ‚àÉ b, f a = b\n"
"```"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Funktion `f` is bijectiv wenn sie injektiv und surjektiv ist."
msgstr ""

#: Game.Doc.Definition
msgid "`f` ist strikt monoton wenn\n"
"\n"
"```\n"
"‚àÄ a b, a < b ‚Üí f a < f b\n"
"```"
msgstr ""

#: Game.Doc.Definition
msgid "Anonyme Funktionen kann man mit `fun (x : ‚Ñ§) => 2 * x` definieren und\n"
"wie andere Objekte verwenden.\n"
"\n"
"Note: `=>` wird in mathlib oft auch `‚Ü¶` (`\\\\maps`) geschrieben."
msgstr ""

#: Game.Doc.Tactic
msgid "Sind eine Annahme `h : A` und eine Implikation `hAB : A ‚Üí B` gegeben, so\n"
"verwandelt `apply hAB at h` die gegebene Annahme in die Annahme `h : B`.\n"
"Ist `B` unser Beweisziel, k√∂nnen wir mit `apply hAB` auch r√ºckw√§rts argumentieren und\n"
"erhalten `A` als neues Beweisziel.   In beiden F√§llen kann die Implikation `hAB` wahlweise\n"
"als Annahme gegeben oder ein bereits bekanntes Lemma sein.\n"
"\n"
"\n"
"## Beispiel\n"
"\n"
"Gegeben sei f√ºr `n : ‚Ñï` folgendes Lemma:\n"
"```\n"
"lemma lem (h : n ‚â§ 0) : n = 0\n"
"```\n"
"\n"
"Finden wir nun als Beweisziel\n"
"\n"
"```\n"
"Goal\n"
"  n = 0\n"
"```\n"
"\n"
"vor, so √§ndert `apply lem` das Beweisziel zu `n ‚â§ 0`.\n"
"\n"
"Anders herum, falls wir eine Annahme `g : m ‚â§ 0` in unseren Annahmen finden, k√∂nnen wir\n"
"diese mit `apply lem at g` zu `g : m = 0` umwandeln.\n"
"\n"
"(Das Lemma ist gemeinhin als `Nat.eq_zero_of_le_zero` bekannt.)"
msgstr ""

#: Game.Doc.Tactic
msgid "`assumption` sucht nach einer Annahme, die genau dem Goal entspricht.\n"
"\n"
"## Beispiel\n"
"\n"
"`assumption` sucht durch die Annahmen und merkt dass `h` genau mit dem Goal √ºbereinstimmt.\n"
"\n"
"```\n"
"Objekte\n"
"  a b c d : ‚Ñï\n"
"  h : a + b = c\n"
"  g : a * b = 16\n"
"  t : c = 12\n"
"Goal\n"
"  a + b = c\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`by_cases h : P` macht eine Fallunterscheidung. Im ersten Goal wird eine Annahme\n"
"`(h : P)` hinzugef√ºgt, im zweiten `(h : ¬¨P)`.\n"
"\n"
"## Details\n"
"\n"
"`P` kann eine beliegige Aussage sein, die als entweder wahr oder falsch angenommen wird.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"example (A : Prop) : A ‚à® ¬¨ A := by\n"
"  by_cases h : A\n"
"  ¬∑ left\n"
"    assumption\n"
"  ¬∑ right\n"
"    assumption\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`by_contra h` startet einen Widerspruchsbeweis.\n"
"\n"
"## Details\n"
"Sei `P` das aktuelle Goal. `by_contra h` f√ºgt eine neue Annahme `(h : ¬¨P)` hinzu\n"
"und setzt das Goal auf `False`.\n"
"\n"
"Oft will man `by_contra` nutzen wenn das Goal von der Form `¬¨ P` ist.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `contradiction` schliesst den Widerspruchsbeweis wenn sich (zwei) Annahmen\n"
"widersprechen.\n"
"* `contrapose` f√ºhrt einen Beweis durch Kontraposition und ist entsprechend\n"
"in √§hnlichen Situationen nutzbar wie `by_contra`"
msgstr ""

#: Game.Doc.Tactic
msgid "`change t` √§ndert das Goal zu `t`. Voraussetzung ist, dass `t` und das alte Goal defEq sind.\n"
"\n"
"## Details\n"
"\n"
"Dies ist insbesonder hilfreich wenn eine Taktik nicht merkt, dass das Goal defEq ist zu einem\n"
"Term, der eigentlich gebraucht w√ºrde.\n"
"\n"
"## Beispiel\n"
"\n"
"Aktuelles Goal:\n"
"\n"
"```\n"
"b: ‚Ñù\n"
"‚ä¢ 1 ‚Ä¢ b = b\n"
"```\n"
"Wobei die Skalarmultiplikation als `fun (a : ‚Ñö) (r : ‚Ñù) => ‚Üëa * r` definiert war. Dann\n"
"kann man mit `change (1 : ‚Ñö) * b = b` das Goal umschreiben und anschliessend mit Lemmas\n"
"√ºber die Multiplikation beweisen."
msgstr ""

#: Game.Doc.Tactic
msgid "`constructor` teilt ein Goal auf, wenn das Goal eine Struktur ist\n"
"\n"
"## Detail\n"
"Wenn das Goal eine Struktur ist, wie z.B. `A ‚àß B` welches zwei Felder hat `‚ü®A, B‚ü©`, dann\n"
"erzeugt `constructor` ein Goal pro Feld der Struktur.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Das Gegenteil von `constructor` ist `‚ü®_, _‚ü©` (`\\\\<>`), der *anonyme Konstruktor*.\n"
"Dieser enspricht ungef√§hr der Tupel-Notation in\n"
"\\\"eine Gruppe ist ein Tupel $(G, 0, +)$, sodass ‚Ä¶\\\".\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"example {A B : Prop} (h : A) (g : B) : A ‚àß B := by\n"
"  constructor\n"
"  ¬∑ assumption\n"
"  ¬∑ assumption\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`contradiction` schliesst den Beweis wenn es einen Widerspruch in den Annahmen findet.\n"
"\n"
"## Details\n"
"Ein Widerspruch in den Annahmen kann unter anderem folgendermassen aussehen:\n"
"\n"
"* `(h : n ‚â† n)`\n"
"* `(h : A)` und `(h' : ¬¨A)`\n"
"* `(h : False)` (i.e. ein Beweis von `False`)\n"
"\n"
"## Beispiel\n"
"\n"
"Folgenes Goal wird von `contradiction` bewiesen\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Normalerweise wird `contradiction` gebraucht um einen Widerspruchsbeweis zu\n"
"  schliessen, der mit `by_contra` er√∂ffnet wurde.\n"
"* Ein Beweis von `False` representiert in Lean einen Widerspruch.\n"
"\n"
"```\n"
"Objekte:\n"
"  (n m : ‚Ñï)\n"
"  (h : n = m)\n"
"  (g : n ‚â† m)\n"
"Goal\n"
"  37 = 60\n"
"```\n"
"nach dem Motto \\\"ein Widerspruch beweist alles.\\\""
msgstr ""

#: Game.Doc.Tactic
msgid "`contrapose` √§ndert ein Goal der Form `A ‚Üí B` zu `¬¨B ‚Üí ¬¨A` und f√ºhrt damit\n"
"eine Beweis durch Kontraposition.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `revert h` kann n√ºtzlich sein um eine Annahme als Implikationspr√§misse zu schreiben bevor man\n"
"  `contrapose` verwendet."
msgstr ""

#: Game.Doc.Tactic
msgid "`exact h` schliesst das Goal wenn der Term `h` mit dem Goal √ºbereinstimmt."
msgstr ""

#: Game.Doc.Tactic
msgid "`fin_cases i` f√ºhrt eine Fallunterscheidung wenn `i` ein endlicher Typ ist.\n"
"\n"
"## Details\n"
"`fin_cases i` ist insbesondere n√ºtzlich f√ºr `(i : Fin n)`, zum Beispiel als Index in\n"
"endlich dimensionalen Vektorr√§umen.\n"
"\n"
"In diesem Fall bewirkt `fin_cases i` dass man Komponentenweise arbeitet."
msgstr ""

#: Game.Doc.Tactic
msgid "`funext x` wird bei Gleichungen von Funktionen `f = g` gebraucht. Das Goal wird zu\n"
"`f x = g x`.\n"
"\n"
"## Details\n"
"Nach dem Motto `f = g ‚Üî ‚àÄ x, f x = g x` sind zwei Funktionen dann identisch, wenn sie\n"
"angewendet auf jedes Element identisch sind. `funext x` benutzt dieses Argument."
msgstr ""

#: Game.Doc.Tactic
msgid "`have h : P` f√ºhrt ein Zwischenresultat ein.\n"
"\n"
"## Details\n"
"Anschliessend muss man zuerst dieses Zwischenresultat beweisen bevor man mit dem Beweis\n"
"weitermachen und das Zwischenresultat verwenden kann.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `suffices h : P` funktioniert genau gleich, au√üer dass die beiden entstehenden Beweise\n"
"  vertauscht sind.\n"
"* `let h : Prop := A ‚àß B` ist verwandt mit `have`, mit Unterschied, dass man mit `let`\n"
"  eine tempor√§re Definition einf√ºhrt."
msgstr ""

#: Game.Doc.Tactic
msgid "`induction n` f√ºhrt einen Induktionsbeweis √ºber `n`.\n"
"\n"
"## Detail\n"
"\n"
"Diese Taktik erstellt zwei Goals:\n"
"* Induktionsanfang, wo `n = 0` ersetzt wird.\n"
"* Induktionsschritt, in dem man die Induktionshypothese `n_ih` zur Verf√ºgung hat.\n"
"\n"
"## Modifikationen in diesem Spiel\n"
"\n"
"* `induction n with d hd` benennt Induktionsvariable und -hypothese. (das ist Lean3-Syntax)\n"
"und funktioniert au√üerhalb vom Spiel nicht genau so.\n"
"* Au√üerhalb des Spiels kriegst du `Nat.zero` und `Nat.succ n` anstatt `0` und `n + 1`\n"
"als F√§lle. Diese\n"
"Terme sind DefEq, aber manchmal ben√∂tigt man die lemmas `zero_eq` und `Nat.succ_eq_add_one`\n"
"um zwischen den schreibweisen zu wechseln\n"
"\n"
"Der richtige Lean4-Syntax f√ºr `with` streckt sich √ºber mehrere Zeilen und ist:\n"
"\n"
"```\n"
"induction n with\n"
"| zero =>\n"
"  sorry\n"
"| succ m m_ih =>\n"
"  sorry\n"
"```\n"
"\n"
"da dieser sich √ºber mehrere Zeilen erstreckt wird er im Spiel nicht eingef√ºhrt.\n"
"\n"
"## Hifreiche Resultate\n"
"\n"
"* `Nat.succ_eq_add_one`: schreibt `n.succ = n + 1` um.\n"
"* `Nat.zero_eq`: schreibt `Nat.zero = 0` um.\n"
"\n"
"Beide sind DefEq, aber manche Taktiken k√∂nnen nicht damit umgehen\n"
"\n"
"* Siehe Definition `‚àë` f√ºr Hilfe mit Induktion √ºber Summen.\n"
"* `rcases n` ist sehr √§hnlich zu `induction n`. Der Unterschied ist, dass bei\n"
"`rcases` keine Induktionshypothese im Fall `n + 1` zur Verf√ºgung steht.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"example (n : ‚Ñï) : 4 ‚à£ 5^n + 7 := by\n"
"  induction n\n"
"  sorry      -- Fall `n = 0`\n"
"  sorry      -- Fall `n + 1`\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`intro x` wird f√ºr Goals der Form `A ‚Üí B` oder `‚àÄ x, P x` verwendet.\n"
"Dadurch wird die Implikationspr√§misse (oder das Objekt `x`) den Annahmen hinzugef√ºgt.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `revert h` macht das Gegenteil von `intro`."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn das Goal von der Form `A ‚à® B` ist, enscheidet man mit `left` die linke Seite zu zeigen.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `right` entscheidet sich f√ºr die linke Seite."
msgstr ""

#: Game.Doc.Tactic
msgid "`let x : ‚Ñï := 5 ^ 2` f√ºhrt eine neue tempor√§re Definition ein.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `have x : ‚Ñï := 5 ^ 2` f√ºhrt ebenfalls eine neue nat√ºrliche Zahle `x` ein, aber\n"
"  Lean vergisst sofort, wie die Zahl definiert war. D.h. `x = 25` w√§re dann nicht\n"
"  beweisbar. Mit `let x : ‚Ñï := 5 ^ 2` ist `x = 25` durch `rfl` beweisbar."
msgstr ""

#: Game.Doc.Tactic
msgid "`linarith` l√∂st Systeme linearer (Un-)Gleichungen.\n"
"\n"
"## Detail\n"
"`linarith` kann lineare Gleichungen und Ungleichungen beweisen indem\n"
"es das Gegenteil vom Goal annimmt und versucht einen Widerspruch in den\n"
"Annahmen zu erzeugen (Widerspruchsbeweis). Es braucht ein `‚â§` definiert um\n"
"zu funktionieren.\n"
"\n"
"## Beispiel\n"
"\n"
"Folgendes kann `linarith` beweisen.\n"
"```\n"
"Objekte\n"
"  x y : ‚Ñ§\n"
"  h‚ÇÅ : 5 * y ‚â§ 35 - 2 * x\n"
"  h‚ÇÇ : 2 * y ‚â§ x + 3\n"
"Goal\n"
"  y ‚â§ 5\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`push_neg` schreibt `¬¨‚àÄ x, _` zu `‚àÉ x, ¬¨ _` und `¬¨‚àÉ x, _` zu `‚àÄx, ¬¨ _` um.\n"
"\n"
"## Details\n"
"\n"
"`push_neg` schiebt das `¬¨` soweit nach innen wie m√∂glich.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Die beiden Lemmas heissen `not_forall` und `not_exists` und k√∂nnen mit `rw` einzeln angewendet\n"
"  werden."
msgstr ""

#: Game.Doc.Tactic
msgid "`rcases h` teilt eine Annahme `h` in ihre Einzelteile auf.\n"
"\n"
"## Details\n"
"F√ºr Annahmen die Strukturen sind, wie z.B. `h : A ‚àß B` (oder `‚àÉx, P x`) kann man die\n"
"Einzelteile mit  `rcases h with ‚ü®a, b‚ü©` (oder `rcases h with ‚ü®x, hx‚ü©`) benennen.\n"
"\n"
"F√ºr eine Annahme der Form `h : A ‚à® B` kann man mit `rcases h with ha | hb` zwei Goals\n"
"erzeugen, einmal unter Annahme der linken Seite, einmal unter Annahme der Rechten.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* F√ºr `n : ‚Ñï` hat `rcases n` einen √§hnlichen Effekt wie `induction n` mit dem Unterschied,\n"
"  dass im Fall `n + 1` keine Induktionshypothese zur Verf√ºgung steht.\n"
"* In Lean gibt es auch die Taktik `cases`, die gleich funktioniert wie `rcases` aber\n"
"  einen mehrzeiligen Syntax hat:\n"
"  ```\n"
"  cases h with\n"
"  | inl ha =>\n"
"    sorry\n"
"  | inr hb =>\n"
"    sorry\n"
"  ```\n"
"  Hier sind `inl`/`inr` die Namen der F√§lle und `ha`/`hb` sind frei gew√§hlte Namen f√ºr die\n"
"  freien Variablen"
msgstr ""

#: Game.Doc.Tactic
msgid "`refine { ?..! }` wird ben√∂tigt um eine Struktur (z.B. ein $R$-Modul) im Taktikmodus in einzelne\n"
"Goals aufzuteilen. Danach hat man ein Goal pro Strukturfeld.\n"
"\n"
"(*Bemerkung*: Es gibt in Lean verschiedenste bessere Varianten dies zu erreichen,\n"
"z.B. \\\"Term Modus\\\" oder \\\"anonyme Konstruktoren\\\", aber f√ºr den Zweck des Spieles bleiben wir\n"
"bei diesem Syntax.)"
msgstr ""

#: Game.Doc.Tactic
msgid "`revert h` f√ºgt die Annahme `h` als Implikationspr√§misse vorne ans Goal an.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `revert` ist das Gegenteil von `intro`.\n"
"* `revert` kann insbesondere n√ºtzlich sein, um anschliessend `contrapose` zu verwenden.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte\n"
"  A P : Prop\n"
"  h : P\n"
"Goal\n"
"  A\n"
"```\n"
"\n"
"hier √§ndert `revert h` den Status zu\n"
"\n"
"```\n"
"Objekte\n"
"  A P : Prop\n"
"Goal\n"
"  P ‚Üí A\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`rfl` beweist ein Goal der Form `X = X`.\n"
"\n"
"## Detail\n"
"\n"
"`rfl` beweist jedes Goal `A = B` wenn `A` und `B` per Definition das gleiche sind (DefEq).\n"
"Andere Taktiken rufen `rfl` oft am Ende versteckt\n"
"automatisch auf um zu versuchen, den Beweis zu schliessen.\n"
"\n"
"\n"
"## Beispiel\n"
"`rfl` kann folgende Goals beweisen:\n"
"\n"
"```\n"
"Objekte\n"
"  a b c : ‚Ñï\n"
"Goal:\n"
"  (a + b) * c = (a + b) * c\n"
"```\n"
"\n"
"```\n"
"Objekte\n"
"  n : ‚Ñï\n"
"Goal\n"
"  1 + 1 = 2\n"
"```\n"
"denn Lean liest dies intern als `0.succ.succ = 0.succ.succ`."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn das Goal von der Form `A ‚à® B` ist, enscheidet man mit `right` die rechte Seite zu zeigen.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `left` entscheidet sich f√ºr die linke Seite."
msgstr ""

#: Game.Doc.Tactic
msgid "L√∂st Gleichungen mit den Operationen `+, -, *, ^`.\n"
"\n"
"## Details\n"
"Insbesondere funktioniert `ring` in Ringen/Semiringen wie z.B. `‚Ñï, ‚Ñ§, ‚Ñö, ‚Ä¶`\n"
"(i.e. Typen `R` mit Instanzen `Ring R` oder `Semiring R`).\n"
"Die Taktik ist besonders auf kommutative Ringe (`CommRing R`) ausgelegt.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `ring` kann nicht wirklich mit Division (`/`) oder Inversen (`‚Åª¬π`) umgehen. Daf√ºr ist die\n"
"  Taktik `field_simp` gedacht, und die typische Sequenz ist\n"
"  ```\n"
"  field_simp\n"
"  ring\n"
"  ```"
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn man eine Annahme `(h : X = Y)` hat, kann man mit\n"
"`rw [h]` alle `X` im Goal durch `Y` ersetzen.\n"
"\n"
"## Details\n"
"\n"
"* `rw [‚Üêh]` wendet `h` r√ºckw√§rts an und ersetzt alle `Y` durch `X`.\n"
"* `rw [h, g, ‚Üêf]`: Man kann auch mehrere `rw` zusammenfassen.\n"
"* `rw [h] at h‚ÇÇ` ersetzt alle `X` in `h‚ÇÇ` zu `Y` (anstatt im Goal).\n"
"\n"
"`rw` funktioniert gleichermassen mit Annahmen `(h : X = Y)` also auch\n"
"mit Theoremen/Lemmas der Form `X = Y`"
msgstr ""

#: Game.Doc.Tactic
msgid "`simp` versucht alle Vereinfachungslemmas anzuwenden, die in der `mathlib` mit `@[simp]`\n"
"gekennzeichnet sind.\n"
"\n"
"## Details\n"
"\n"
"* `simp?` zeigt welche Lemmas verwendet wurden.\n"
"* `simp [my_lemma]` f√ºgt zudem `my_lemma` tempor√§r zur Menge der `simp`-Lemmas hinzu.\n"
"* ein `simp`, das nicht am Ende des Beweis steht sollte durch eine entsprechende\n"
"  `simp only [...]` Aussage ersetzt werden, um den Beweis stabiler zu machen."
msgstr ""

#: Game.Doc.Tactic
msgid "`simp_rw [h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]` versucht wie `rw` jedes Lemma der Reihe nach zu Umschreiben zu verwenden,\n"
"verwendet aber jedes Lemma so oft es kann.\n"
"\n"
"## Details\n"
"\n"
"Es bestehen aber drei grosse Unterschiede zu `rw`:\n"
"\n"
"* `simp_rw` wendet jedes Lemma so oft an wie es nur kann.\n"
"* `simp_rw` kann besser unter Quantifiern umschreiben als `rw`.\n"
"* `simp_rw` f√ºhrt nach jedem Schritt ein `simp only []` aus und vereinfacht dadurch grundlegenste\n"
"  Sachen."
msgstr ""

#: Game.Doc.Tactic
msgid "`suffices h : P` f√ºhrt ein neues Zwischenresultat ein, aus dem das Goal direkt folgen soll.\n"
"\n"
"## Details\n"
"\n"
"Der einzige Unterschied zu `have h : P` ist, dass die beiden resultierenden Goals vertauscht sind.\n"
"\n"
"Mathematisch braucht man diese in ein bisschen unterschiedlichen F√§llen:\n"
"\n"
"* `suffices h : P` : \\\"Es gen√ºgt zu zeigen, dass ‚Ä¶\\\". Als erstes folgt die Erkl√§rung wieso\n"
"  das gen√ºgt, danach muss man nur noch `P` beweisen.\n"
"* `have h : P` : Ein (kleines) Zwischenresultat. Als erstes folgt dann der Beweis dieses\n"
"Resultats, anschliessend setzt man den Beweis mit Hilfe des Zwischenresultats fort."
msgstr ""

#: Game.Doc.Tactic
msgid "`symm` (f√ºr \"symmetry\") kann Gleichheiten oder `‚Üî` umdrehen. `symm at h` dreht eine Gleichheit\n"
"(oder `‚Üî`) in der Annahme `h`.\n"
"\n"
"## Details\n"
"\n"
"Man kann auch `h.symm` f√ºr die gedrehte Annahme schreiben, wenn man diese irgendwo\n"
"verwendet. Das verwendet intern die Lemmata\n"
"`Eq.symm` oder `Iff.symm`.\n"
"\n"
"## Beispiel\n"
"\n"
"ist das Goal `x = y`, dann wandelt es `symm` in `y = x` um. Analog, wandelt `symm at h` die Annahme\n"
"`(h : z = w)` in `(h : w = z)` um."
msgstr ""

#: Game.Doc.Tactic
msgid "`trivial` versucht durch Kombination von wenigen simplen Taktiken das Goal zu schliessen.\n"
"\n"
"## Details\n"
"Die Taktiken, die verwendet werden sind:\n"
"\n"
"* `assumption`\n"
"* `rfl`\n"
"* `contradiction`\n"
"* und noch 3 andere, die hier nicht behandelt werden\n"
"  (`decide`, `apply True.intro`, `apply And.intro`)."
msgstr ""

#: Game.Doc.Tactic
msgid "`unfold myDef` √∂ffnet eine Definition im Goal.\n"
"\n"
"## Details\n"
"Bis auf DefEq (definitinal equality) √§ndert `unfold` nichts, manche Taktiken\n"
"(z.B. `push_neg`, `rw`) brauchen aber manchmal die Hilfe.\n"
"\n"
"`unfold myDef at h` kann auch Definitionen in Annahmen √∂ffnen\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `change P` ist eine andere Taktik, die das aktuelle Goal in einen DefEq-Ausdruck umschreibt.\n"
"  Diese Taktik braucht man auch manchmal um zu hacken, wenn Lean M√ºhe hat etwas zu verstehen."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn das Goal von der Form `‚àÉx, P x` ist, kann man mit `use n` ein konkretes Element angeben\n"
"mit dem man das Goal beweisen m√∂chte.\n"
"\n"
"## Details\n"
"\n"
"`use n` versucht zudem anschliessend `rfl` aufzurufen, und kann das Goal damit manchmal direkt\n"
"schlie√üen."
msgstr ""

#: Game.Levels.Contradiction.L01_Have
msgid "Was wir haben, haben wir."
msgstr ""

#: Game.Levels.Contradiction.L01_Have
msgid "**Benedictus**: Hier, schaut mal. Das habe ich f√ºr Euch vorbereitet."
msgstr ""

#: Game.Levels.Contradiction.L01_Have
msgid "**Du**: Also als erstes teile ich wohl mal das Und (`‚àß`) auf."
msgstr ""

#: Game.Levels.Contradiction.L01_Have
msgid "**Du**: Und jetzt ‚Ä¶\n"
"\n"
"**Benedictus**: ‚Ä¶ solltest du dir ein passendes Zwischenresultat zurechtlegen.\n"
"\n"
"**Robo**: Ja! Probier mal `have g : ¬¨ B`!"
msgstr ""

#: Game.Levels.Contradiction.L01_Have
msgid "**Du**: Was? Jetzt hab ich einfach angenommen, dass sei richtig?\n"
"\n"
"**Robo**: Nee, jetzt musst du das erst noch beweisen, bevor du es dann benutzen kannst."
msgstr ""

#: Game.Levels.Contradiction.L01_Have
msgid "**Robo**: `apply` sollte helfen"
msgstr ""

#: Game.Levels.Contradiction.L01_Have
msgid "**Du**: Und wie war das nochmals wenn zwei Annahmen sich widersprechen?\n"
"\n"
"**Robo**: `contradiction`."
msgstr ""

#: Game.Levels.Contradiction.L01_Have
msgid "**Benedictus**: Das sieht gut aus!"
msgstr ""

#: Game.Levels.Contradiction.L02_Suffices
msgid "Es reicht!"
msgstr ""

#: Game.Levels.Contradiction.L02_Suffices
msgid "**Benedictus**: Ihr h√§ttet nat√ºrlich auch erst das Hauptresultat und dann das\n"
"Zwischenresultat beweisen k√∂nnen. Das k√∂nnt Ihr ja mal an dieser Aufgabe probieren, die ist\n"
"ganz √§hnlich."
msgstr ""

#: Game.Levels.Contradiction.L02_Suffices
msgid "**Robo**: Ich wei√ü was er meint! Anstatt `have` kannst du auch `suffices`\n"
"verwenden. Das funktioniert genau gleich, au√üer, dass dann die beiden Beweisziele vertauscht sind.\n"
"\n"
"**Du**: Also nach `suffices g : ¬¨B` muss ich dann zuerst zeigen, wie man mit `g` den Beweis\n"
"abschliesst, bevor ich `g` beweise?\n"
"\n"
"**Robo**: Genau!"
msgstr ""

#: Game.Levels.Contradiction.L02_Suffices
msgid "**Robo**: Also hier beendest du den Beweis unter der Annahme `¬´{g}¬ª` sei wahr."
msgstr ""

#: Game.Levels.Contradiction.L02_Suffices
msgid "**Robo**: Und hier beweist du das Zwischenresultat."
msgstr ""

#: Game.Levels.Contradiction.L02_Suffices
msgid "**Benedictus**: Genau so meinte ich das. Ob Ihr nun in Zukunft `have` und\n"
"`suffices` verwendet, ist reine Geschmacksfrage. Hauptsache, Ihr wisst, wie Ihr\n"
"entfernte Ziele in kleinen Schritte erreicht."
msgstr ""

#: Game.Levels.Contradiction.L03_ByContra
msgid "Widerspruch"
msgstr ""

#: Game.Levels.Contradiction.L03_ByContra
msgid "**Benedictus**: Hier ist noch eine Variante."
msgstr ""

#: Game.Levels.Contradiction.L03_ByContra
msgid "**Robo**: Ein `¬¨` im Goal hei√üt h√§ufig, dass du einen Widerspruchsbeweis f√ºhren\n"
"m√∂chtest.\n"
"\n"
"**Du**: Und wie mache ich das? Mit `contradiction`?\n"
"\n"
"**Robo**: Mit `by_contra h` f√§ngst du einen Widerspruchsbeweis an. Und mit `contradiction`\n"
"schlie√üt du ihn ab."
msgstr ""

#: Game.Levels.Contradiction.L03_ByContra
msgid "**Robo**: Jetzt hast du also eine Annahme `¬´{h}¬ª : ¬´{A}¬ª`, und damit musst du einen\n"
"Widerspruch herleiten.\n"
"\n"
"Du k√∂nntest zum Beispiel jetzt mit `suffices` sagten, welchen Widerspruch du gern herleiten\n"
"m√∂chtest, etwa `suffices k : B`"
msgstr ""

#: Game.Levels.Contradiction.L03_ByContra
msgid "**Du**: Ah, und jetzt kann ich einfach sagen dass sich die Annahmen `¬´{B}¬ª` und `¬¨¬´{B}¬ª` sich\n"
"widersprechen."
msgstr ""

#: Game.Levels.Contradiction.L03_ByContra
msgid "**Robo**: Und jetzt musst du nur noch das Zwischenresultat herleiten, dass zu diesem\n"
"Widerspruch gef√ºhrt hat."
msgstr ""

#: Game.Levels.Contradiction.L03_ByContra
msgid "**Benedictus**: Ich sehe schon, Ihr lernt schnell!"
msgstr ""

#: Game.Levels.Implication.L01_Intro
msgid "Intro"
msgstr ""

#: Game.Levels.Implication.L01_Intro
msgid "**Operationsleiter**: Hier, zum Beispiel:"
msgstr ""

#: Game.Levels.Implication.L01_Intro
msgid "**Operationsleiter**: Die Arbeiten meinen, das w√§re so richtig und wir w√ºrden das dringend\n"
"brauchen. Aber keiner kann es mir beweisen.\n"
"\n"
"**Du**: Einen Moment. Das ist ja gerade so eine Implikation (`\\to`). Wir nehmen an,\n"
"dass `¬´{B}¬ª` gilt, und wollen zeigen, dass dann gilt `¬´{A}¬ª` impliziert `¬´{A}¬ª und ¬´{B}¬ª`. Ja,\n"
"klar! Nat√ºrlich stimmt das.\n"
"\n"
"Der Operationsleiter sieht dich erwartungsvoll an.\n"
"\n"
"**Du** *(leise zu Robo)*: Soll ich ihm `tauto` aufschreiben?\n"
"\n"
"**Robo** *(leise zur√ºck)*: So wie der aussieht, f√ºrchte ich, das wird er auch nicht verstehen.\n"
"Schreib den Beweis lieber aus.\n"
"\n"
"**Du**: Aber wie denn? Ich glaube, ich w√ºrde als erstes gern so etwas sagen wie 'Nehmen wir\n"
"also an, `¬´{A}¬ª` gilt ‚Ä¶'\n"
"\n"
"**Robo**: Ja, gute Idee. W√§hle dazu f√ºr deine Annahme einfach einen Namen, zum Beispiel `h`,\n"
"und schreib `intro h`."
msgstr ""

#: Game.Levels.Implication.L01_Intro
msgid "**Du**: Okay. Jetzt habe ich also sowohl `¬´{A}¬ª` als auch `¬´{B}¬ª` in meinen Annahmen und\n"
"muss `¬´{A}¬ª ‚àß ¬´{B}¬ª` zeigen.\n"
"\n"
"**Robo**: Genau. Und wie das geht, wei√üt du ja schon."
msgstr ""

#: Game.Levels.Implication.L01_Intro
msgid "**Operationsleiter**: Perfekt! Danke sch√∂n!\n"
"\n"
"Er geht zu einer Schalttafel und ein paar Kn√∂pfe. Irgendwo setzt sich lautstark ein\n"
"F√∂rderband in Bewegung.\n"
"\n"
"**Operationsleiter**: Habt Ihr vielleicht noch ein paar Minuten?"
msgstr ""

#: Game.Levels.Implication.L02_Revert
msgid "Revert"
msgstr ""

#: Game.Levels.Implication.L02_Revert
msgid "Der Operationsleiter holt aus einem Container einen Stapel Papier hervor.\n"
"\n"
"**Operationsleiter**: Hier hat sich echt einiges angesammelt. W√§re echt super, wenn Ihr mir\n"
"noch ein bisschen helfen k√∂nntet.\n"
"\n"
"Er √ºbergibt Euch das oberste Blatt."
msgstr ""

#: Game.Levels.Implication.L02_Revert
msgid "**Operationsleiter**: Das ist von einem Kollegen.\n"
"\n"
"**Robo**: Oh, das hab ich schon einmal irgendwo gelesen. Warte mal ‚Ä¶ Richtig! Das war\n"
"damals, als ich Wikipedia gecrawlt habe: `Der Modus ponens ist eine schon in der antiken\n"
"Logik gel√§ufige Schlussfigur, die in vielen logischen ‚Ä¶`\n"
"\n"
"**Du**: Robo! Gefragt ist ein Beweis und kein historischer Aufsatz! Oder komme ich hier\n"
"etwa mit `mopo` oder so etwas weiter?\n"
"\n"
"**Robo**: Okay, nein, sorry. `mopo` gibt es nicht. Probier lieber `revert ¬´{hA}¬ª`."
msgstr ""

#: Game.Levels.Implication.L02_Revert
msgid "**Du**: Aha. `revert` ist quasi `intro` r√ºckw√§rts.\n"
"\n"
"**Robo**: Genau. `intro` nimmt die Pr√§misse aus einer Implikation `¬´{A}¬ª \\to ¬´{B}¬ª` im\n"
"Beweisziel und macht daraus eine Annahme. `revert` nimmt umgekehrt eine Annahme und\n"
"setzt sie als Implikationspr√§misse vor das Beweisziel. Aber nun mach schon fertig."
msgstr ""

#: Game.Levels.Implication.L02_Revert
msgid "Der Operationsleiter nimmt erfreut Eure L√∂sung entgegen, und greift zum Telefon."
msgstr ""

#: Game.Levels.Implication.L03_Apply
msgid "Apply"
msgstr ""

#: Game.Levels.Implication.L03_Apply
msgid "Leider l√§uft das Telefonat nicht so gut. Er legt wieder auf und sch√ºttelt mit dem Kopf.\n"
"\n"
"**Operationsleiter**: Der Kollege auf der anderen Seite des Mondes versteht kein `revert`. Oder\n"
"er tut zumindest so. Habt Ihr noch eine andere Idee?\n"
"\n"
"Er zieht eine Linie unter Euren Beweis, erg√§nzt ein durchgestrichenes ~`revert`~, und legt Euch\n"
"das Blatt ein zweites Mal vor."
msgstr ""

#: Game.Levels.Implication.L03_Apply
msgid "**Robo**: Vielleicht w√§re es ohnehin eleganter gewesen, die gegebene Implikation anzuwenden.\n"
"Probier doch mal `apply hAB at h`."
msgstr ""

#: Game.Levels.Implication.L03_Apply
msgid "**Robo**: Ich sagte `‚Ä¶ at h`. Aber einfach nur `apply hAB` funktioniert offenbar auch.\n"
"Jetzt hast Du sozusagen `hAB` auf das Beweisziel `B` angewendet, und musst nur\n"
"noch `A` beweisen."
msgstr ""

#: Game.Levels.Implication.L03_Apply
msgid "**Du**: Ja, das kommt mir jetzt auch nat√ºrlich vor."
msgstr ""

#: Game.Levels.Implication.L03_Apply
msgid "Diesmal scheint das Telefonat erfolgreich zu verlaufen."
msgstr ""

#: Game.Levels.Implication.L04_Apply
msgid "Implikation"
msgstr ""

#: Game.Levels.Implication.L04_Apply
msgid "**Operationsleiter**: Das hier ist jetzt wieder ein lokales Problem."
msgstr ""

#: Game.Levels.Implication.L04_Apply
msgid "**Du**: Ich soll Implikationen $A \\Rightarrow B \\Rightarrow C$ zu $A \\Rightarrow C$\n"
"kombinieren?\n"
"\n"
"**Robo**: Vielleicht f√§ngst du wieder mit `intro` an?"
msgstr ""

#: Game.Levels.Implication.L04_Apply
msgid "**Robo**: Das ist wieder eine Anwendung von `apply`."
msgstr ""

#: Game.Levels.Implication.L04_Apply
msgid "**Operationsleiter**: Ihr seid echt super!"
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "Implikation"
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "Die n√§chste Seite sieht ein bisschen komplizierter aus. Damit Ihr nicht die √úbersicht verliert, fasst Robo sofort die verschiedenen Implikationen in einem Diagramm zusammen.\n"
"  $$\n"
"  \\begin{CD}\n"
"       A  @>{f}>> B @<{g}<< C    \\\\\n"
"    @V{h}VV    @V{i}VV   @V{j}VV \\\\\n"
"       D  @<{k}<< E @>{l}>> F    \\\\\n"
"    @A{m}AA    @A{n}AA   @V{p}VV \\\\\n"
"       G  @<{q}<< H @>{r}>> I\n"
"  \\end{CD}\n"
"  $$"
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "**Du**: Also ich muss einen Pfad von Implikationen $A \\Rightarrow I$ finden.\n"
"\n"
"**Robo**: Lass mich mal raten, wie wir anfangen ‚Ä¶ Wieder `intro`?"
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "**Robo**: Na wieder `apply`, was sonst."
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "**Robo**: Das sieht nach einer Sackgasse aus ‚Ä¶"
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "**Robo**: Das sieht nicht gut aus."
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "**Robo**: Nah, da stimmt doch was nicht ‚Ä¶"
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "**Robo**: Halt! Falsch abgebogen."
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "**Robo**: Bist du dir sicher?"
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "**Robo**: Ehm ‚Ä¶"
msgstr ""

#: Game.Levels.Implication.L05_Apply
msgid "Der Operationsleiter bedankt sich wieder artig. Er dr√ºckt wieder auf ein paar Kn√∂pfe,\n"
"und mit einem lauten Ratteln springen mehrere F√∂rderb√§nder gleichzeitig wieder an."
msgstr ""

#: Game.Levels.Implication.L06_Iff
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implication.L06_Iff
msgid "**Operationsleiter**: Wir hatten auch mal ein paar F√∂rderb√§nder, die in beide Richtungen laufen\n"
"konnten. Die hatte ich vorsichtshalber alle abgestellt, weil in den neusten Handb√ºchern von\n"
"solchen Doppelb√§ndern abgeraten wird. Aber vielleicht sind sie ja unter bestimmten\n"
"Voraussetzungen doch sicher? Was meint Ihr zu diesem Fall?"
msgstr ""

#: Game.Levels.Implication.L06_Iff
msgid "**Robo**: `A ‚Üî B` ist nat√ºrlich Leansch f√ºr $A \\iff B$, also genau-dann-wenn.\n"
"Die Aussage `A ‚Üî B` besteht also aus zwei Teilen; sie ist als `‚ü®A ‚Üí B, B ‚Üí A‚ü©` definiert.\n"
"\n"
"**Du**: Also ganz √§hnlich wie das UND, `A ‚àß B`?\n"
"\n"
"**Robo**: Genau. Entsprechend kannst du auch hier mit `constructor` anfangen."
msgstr ""

#: Game.Levels.Implication.L06_Iff
msgid "**Du**: Ah, und die beiden Teile habe ich schon in den Annahmen."
msgstr ""

#: Game.Levels.Implication.L06_Iff
msgid "**Operationsleiter**: Okay, das leuchtet mir ein.\n"
"\n"
"**Robo** *(zu dir)*: √úbrigens, so wie bei `(h : A ‚àß B)` die beiden\n"
"Teile `h.left` und `h.right` hei√üen,\n"
"hei√üen bei `(h : A ‚Üî B)` die beiden Teile `h.mp` und `h.mpr`.\n"
"\n"
"**Du**: Also `h.mp` ist `A ‚Üí B`? Wieso `mp`?\n"
"\n"
"**Robo**: `mp` steht f√ºr Modus Ponens`. Der Modus ponens ist eine schon in der antiken\n"
"Logik gel√§ufige Schlussfigur, die in vielen logischen Systemen ‚Ä¶ Ach nee, das wolltest\n"
"du ja nicht h√∂ren. Das \"r\" in `mpr` steht f√ºr \"reverse\", weil's die R√ºckrichtung ist."
msgstr ""

#: Game.Levels.Implication.L07_Symm
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implication.L07_Symm
msgid "**Operationsleiter**: Hier ist noch so etwas."
msgstr ""

#: Game.Levels.Implication.L07_Symm
msgid "**Du**: Das ist ja nur verdreht.\n"
"\n"
"**Robo**: Ich kenne ein Werkzeug daf√ºr. Mit `symm` oder `symm at ¬´{h}¬ª` kannst du eines\n"
"der beiden umdrehen."
msgstr ""

#: Game.Levels.Implication.L07_Symm
msgid "**Operationsleiter**: Das war ja symmpel. Das n√§chste Problem sieht aber schwieriger aus."
msgstr ""

#: Game.Levels.Implication.L08_Rw
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implication.L08_Rw
msgid "**Operationsleiter**: Hier, k√∂nnt ihr dazu auch was sagen?"
msgstr ""

#: Game.Levels.Implication.L08_Rw
msgid "**Du**: $B \\iff A \\iff D \\iff C$, die sind doch alle √§quivalent‚Ä¶\n"
"\n"
"**Robo**: Ja, aber du musst ihm helfen, die √Ñquivalenzen umzuschreiben. Mit `rw [h‚ÇÅ]` kannst\n"
"du `C` durch `D` ersetzen."
msgstr ""

#: Game.Levels.Implication.L08_Rw
msgid "**Du** Und wenn ich in die andere Richtung umschreiben m√∂chte?\n"
"\n"
"**Robo**: Dann schreibst du ein `‚Üê` (`\\l`, also klein \"L\") vor den Namen, also `rw [‚Üê h‚Çì]`."
msgstr ""

#: Game.Levels.Implication.L08_Rw
msgid "**Du**: Ehm, das war verkehrt.\n"
"\n"
"**Robo**: Ja, anders herum w√§r's besser gewesen. Aber wenn du jetzt einfach weitermachst,\n"
"bis Du sowas wie `A ‚Üî A` erh√§ltst, kann `rfl` das beweisen.\n"
"\n"
"**Robo: Da f√§llt mir ein, `rw` wendet ohnehin auch versuchsweise `rfl` an.\n"
"Das hei√üt, du musst `rfl` nicht einmal ausschreiben."
msgstr ""

#: Game.Levels.Implication.L08_Rw
msgid "**Operationsleiter**: Wenn Ihr so weitermacht, dann kommen wir ja durch den ganzen Packen durch!"
msgstr ""

#: Game.Levels.Implication.L09_Iff
msgid "Genau dann wenn"
msgstr ""

#: Game.Levels.Implication.L09_Iff
msgid "**Operationsleiter**: Das hier ist wieder f√ºr meinen beschr√§nkten Kollegen. Ich glaube,\n"
"`rw` mag der auch nicht. Geht das trotzdem?"
msgstr ""

#: Game.Levels.Implication.L09_Iff
msgid "**Du**: Naja ich kann wohl immerhin mal mit `intro` anfangen ‚Ä¶\n"
"\n"
"**Robo**: ‚Ä¶ und dann schauen wir weiter!"
msgstr ""

#: Game.Levels.Implication.L09_Iff
msgid "**Robo**: Also eine Implikation wendet man mit `apply` an ‚Ä¶\n"
"\n"
"**Du**: Wei√ü ich doch! Aber `¬´{h}¬ª` ist keine Implikation, sondern eine √Ñquivalenz.\n"
"Da w√ºrde ich doch eigentlich `rw [‚Üê ¬´{h}¬ª]` sagen wollen.\n"
"\n"
"**Robo**: Die Richtung `¬´{A}¬ª ‚Üí ¬´{B}¬ª` von `¬´{h}¬ª` hei√üt `¬´{h}¬ª.mp`. Du kannst sie\n"
"mit `apply (¬´{h}¬ª.mp) at ‚Ä¶` anwenden."
msgstr ""

#: Game.Levels.Implication.L09_Iff
msgid "**Robo**: So kannst Du nat√ºrlich auch anfangen."
msgstr ""

#: Game.Levels.Implication.L09_Iff
msgid "**Operationsleiter**: Okay, super. Das m√ºsste passen.\n"
"\n"
"Er telefoniert wieder.\n"
"\n"
"**Operationsleiter**: Bingo!"
msgstr ""

#: Game.Levels.Implication.L10_Iff
msgid "Genau dann wenn"
msgstr ""

#: Game.Levels.Implication.L10_Iff
msgid "**Operationsleiter**: Ah, die n√§chste Seite ist auch von diesem Kollegen.\n"
"Aber da ist noch eine Notiz bei. Wir hatten hierf√ºr schon einmal einen Beweis,\n"
"aber den mochte er nicht. Er wollte einen Beweis, der weder `rw` noch `apply` verwendet!!\n"
"\n"
"Er holt tief Luft und seuft.\n"
"\n"
"**Operationsleiter**: Ich glaube, der stellt sich immer viel d√ºmmer, als er ist.\n"
"Aber meint Ihr, Ihr schafft das?"
msgstr ""

#: Game.Levels.Implication.L10_Iff
msgid "**Du**: Hmm, mindestens mit der Implikation kann ich anfangen."
msgstr ""

#: Game.Levels.Implication.L10_Iff
msgid "**Robo**: Genau, das war `intro`."
msgstr ""

#: Game.Levels.Implication.L10_Iff
msgid "**Du**: Also, ich kenne `rw [¬´{h}¬ª]` und `apply (¬´{h}¬ª.mp)`, aber das wollten wir ja\n"
"diesmal vermeiden.\n"
"\n"
"**Robo**: Was du machen k√∂nntest, ist, mit `rcases ¬´{h}¬ª with ‚ü®mp, mpr‚ü©` die Annahme\n"
"in zwei Teile aufteilen."
msgstr ""

#: Game.Levels.Implication.L10_Iff
msgid "**Robo**: Hier m√ºsstest du jetzt `rw [‚Üê¬´{h}¬ª]` oder `apply ¬´{h}¬ª.mp` benutzen.\n"
"Geh lieber einen Schritt zur√ºck, sodass das Goal `A ‚Üí B` ist."
msgstr ""

#: Game.Levels.Implication.L10_Iff
msgid "**Du**: Ah, und jetzt ist das Beweisziel in den Annahmen."
msgstr ""

#: Game.Levels.Implication.L10_Iff
msgid "**Operationsleiter**: Perfekt, das sollte reichen!"
msgstr ""

#: Game.Levels.Implication.L11_ByCases
msgid "by_cases"
msgstr ""

#: Game.Levels.Implication.L11_ByCases
msgid "Beim n√§chsten Problem stutzt der Operationsleiter.\n"
"\n"
"**Operationsleiter**: Ehrlich gesagt wei√ü ich gar nicht, wo dieses Blatt herkommt. Das ist\n"
"gar nicht von mir. Sieht aber irgendwie interessant aus."
msgstr ""

#: Game.Levels.Implication.L11_ByCases
msgid "**Du**: Naja, eine der beiden Aussagen `A` oder `¬¨A` wird schon wahr sein.\n"
"\n"
"**Robo**: Klarer Fall f√ºr eine Fallunterscheidung, w√ºrde ich sagen. Probier\n"
"mal `by_cases h : A`."
msgstr ""

#: Game.Levels.Implication.L11_ByCases
msgid "**Robo**: Siehst du, jetzt hat der Beweis zwei Teile. Im ersten Teil nimmst\n"
"du an, dass `A` wahr ist. Im zweiten nimmst du an, dass `A` falsch ist."
msgstr ""

#: Game.Levels.Implication.L11_ByCases
msgid "Der Operationsleiter nickt zustimmend."
msgstr ""

#: Game.Levels.Implication.L12_Rw
msgid "Lemmas"
msgstr ""

#: Game.Levels.Implication.L12_Rw
msgid "**Operationsleiter**: Wieder etwas f√ºr den Kollegen ‚Ä¶. Und er wollte wieder einen\n"
"Beweise ohne `apply`. Ich sehe hier auch, dass ich mir schon einmal etwas\n"
"hierzu notiert hatte. Richtig, es gibt da dieses Lemma:\n"
"```\n"
"lemma not_not (A : Prop) : ¬¨¬¨A ‚Üî A\n"
"```\n"
"\n"
"**Operationsleiter**: Schafft Ihr das damit?"
msgstr ""

#: Game.Levels.Implication.L12_Rw
msgid "**Robo**: Ein Lemma, das wie `not_not` ein `‚Üî` oder `=` im Statement hat, kann\n"
"auch mit `rw [not_not]` verwendet werden."
msgstr ""

#: Game.Levels.Implication.L12_Rw
msgid "**Du**: H√§h, wieso hat das jetzt 2 von 3 der `¬¨¬¨` umgeschrieben?\n"
"\n"
"**Robo**: `rw` schreibt nur das erste um, das es findet, also `¬¨¬¨C`. Aber weil dieses\n"
"mehrmals vorkommt, werden die alle ersetzt ‚Ä¶\n"
"\n"
"**Du**: Ah, und `¬¨¬¨B` ist etwas anderes, also brauche ich das Lemma nochmals."
msgstr ""

#: Game.Levels.Implication.L12_Rw
msgid "**Du**: Wir sind schon fertig ‚Ä¶?\n"
"\n"
"**Robo**: Ja, `rw` versucht immer anschlie√üend `rfl` aufzurufen, und das hat hier funktioniert."
msgstr ""

#: Game.Levels.Implication.L13_Summary
msgid "Zusammenfassung"
msgstr ""

#: Game.Levels.Implication.L13_Summary
msgid "**Operationsleiter**: Ihr habt mir wirklich so geholfen! Hier ist das letzte Problem.\n"
"Das habe ich von meinem Vorg√§nger geerbt. Er hat behauptet, wenn wir das l√∂sen k√∂nnen,\n"
"dann l√§uft hier wieder alles. Aber es sah mir immer viel zu schwierig aus, um es √ºberhaupt\n"
"zu versuchen. Wollt Ihr es einmal probieren?\n"
"\n"
"**Du**: Klar, zeig her! Robo, kannst du mir vielleicht auch noch einmal so eine nette\n"
"Zusammenfassung anzeigen, was ich theoretisch in den letzten f√ºnf Minuten gelernt habe?\n"
"\n"
"**Robo**: Hier ist die √úbersicht:\n"
"\n"
"## Notationen / Begriffe\n"
"\n"
"|               | Beschreibung                                             |\n"
"|:--------------|:---------------------------------------------------------|\n"
"| ‚Üí             | Eine Implikation.                                        |\n"
"| ‚Üî             | Genau-dann-wenn / √Ñquivalenz.                            |\n"
"\n"
"## Taktiken\n"
"\n"
"|     | Taktik                    | Beispiel                                               |\n"
"|:----|:--------------------------|:-------------------------------------------------------|\n"
"| 8   | `intro`                   | F√ºr eine Implikation im Goal.                          |\n"
"| 9   | `revert`                  | Umkehrung von `intro`.                                 |\n"
"| 10  | `apply`                   | Wendet eine Implikation auf das Goal an.               |\n"
"| 10·µá | `apply`                   | Wendet ein Lemma an.                                   |\n"
"| 11  | `by_cases`                | Fallunterscheidung `P` und `¬¨P`                        |\n"
"| 12  | `rw`                      | Umschreiben zweier √§quivalenter Aussagen.              |\n"
"| 12·µá | `rw`                      | Benutzt ein Lemma, dessen Aussage eine √Ñquivalenz ist. |\n"
"| 13  | `symm`                    | Tauscht `A ‚Üî B` zu `B ‚Üî A`.                            |"
msgstr ""

#: Game.Levels.Implication.L13_Summary
msgid "**Du** *(fl√ºsternd)*: Ist das nicht die Definition von `‚Üí`?\n"
"\n"
"**Robo** *(fl√ºsternd)*: K√∂nnte man so sehen. Aber auf Leansch ist das blo√ü eine √Ñquivalenz."
msgstr ""

#: Game.Levels.Implication.L13_Summary
msgid "**Robo**: Vielleicht kannst du wieder `by_cases` benutzen."
msgstr ""

#: Game.Levels.Implication.L13_Summary
msgid "**Robo**: Na Implikationen gehst du immer mit `intro` an."
msgstr ""

#: Game.Levels.Implication.L13_Summary
msgid "**Robo**: Ich w√ºrde mal die Annahme `h` mit `rcases` aufteilen."
msgstr ""

#: Game.Levels.Implication.L13_Summary
msgid "**Operationsleiter**: Das ist ja fantastisch! Tausend Dank! Dann will ich Euch auch gar\n"
"nicht l√§nger aufhalten.\n"
"Ihr wollt bestimmt weiter zum Planeten Quantus, oder?\n"
"\n"
"**Du**: Ehm, vielleicht ‚Ä¶\n"
"\n"
"**Operationsleiter**: Dann habe ich noch eine letzte Bitte. Ich habe hier noch ein P√§ckchen\n"
"f√ºr die K√∂nigin von Quantus! Auch schon von meinem Vorg√§nger geerbt. Die Post will es\n"
"nicht annehmen, weil ich die Adresse nicht wei√ü. K√∂nntet Ihr es vielleicht zu ihr mitnehmen?\n"
"\n"
"**Du**: Klar! Robo, halt mal.\n"
"\n"
"Robo nimmt das P√§ckchen und l√§sst es irgendwo in seinem Innern verschwinden.\n"
"Der Operationsleiter sieht ihn entgeistert an.\n"
"\n"
"**Robo**: Keine Angst, ich verdaue nichts!"
msgstr ""

#: Game.Levels.Implication
msgid "Implis"
msgstr ""

#: Game.Levels.Implication
msgid "Zur√ºck im Raumschiff macht ihr euch auf den Weg zu einem benachbarten Planeten, der ebenfalls\n"
"bewohnt zu sein scheinen.\n"
"\n"
"**Du**: Ich habe immer noch das Gef√ºhl, dass ich die Aufgabe von K√∂nigin *Logisinde*\n"
"ohne `tauto` nicht h√§tte l√∂sen k√∂nnen.\n"
"Kamen in der Aufgabe nicht auch Implikationen vor?\n"
"\n"
"**Robo**: Vielleicht haben wir ja auf dem Planeten *Implis*, den wir gerade ansteuern,\n"
"Gelegenheit, noch etwas dazuzulernen. Festhalten bitte ‚Ä¶\n"
"\n"
"Und damit leitet Robo den Landeanflug ein.\n"
"\n"
"Implis scheint ein riesiger Tagebau zu sein.\n"
"√úberall verlaufen F√∂rderb√§nder, kreuz und quer, aber die meisten stehen still.\n"
"Ein sch√ºchterner Operationsleiter erwartet Euch bereits.\n"
"\n"
"**Operationsleiter**: Ihr kommt mir gerade recht! Ich habe schon geh√∂rt. Echte Mathematiker!\n"
"Wisst Ihr, wir f√∂rdern hier Wahrheitswerte. Und dabei muss man h√∂llisch aufpassen.\n"
"Ein Fehler, und alles bricht zusammen. Aber ich bin sehr vorsichtig. Ich sage immer:\n"
"Lieber Stillstand als Untergang!"
msgstr ""

#: Game.Levels.Contradiction.L04_ByContra
msgid "Kontraposition"
msgstr ""

#: Game.Levels.Contradiction.L04_ByContra
msgid "**Benedictus**: Ich habe noch eine sch√∂ne Frage zu ungeraden Quadraten f√ºr Euch.\n"
"Aber vorher beweist Ihr besser noch diese √Ñquivalenz hier. Ich gaube, die hat sogar\n"
"bei Euch einen Namen: *Kontrapositions√§quivalenz*, oder so etwas. Auf Leansch nennen wir\n"
"die √Ñquivalenz einfach `not_imp_not`. Ist doch viel einleuchtender, oder?"
msgstr ""

#: Game.Levels.Contradiction.L04_ByContra
msgid "**Du**: Ja, das habe ich tats√§chlich schon einmal gesehen.\n"
"\n"
"**Robo**: Ja, klar hast du das schon einmal gesehen. Das benutzen Mathematiker doch st√§ndig.\n"
"Wenn ihnen zu $A ‚áí B$ nichts einf√§llt, zeigen sie stattdessen $¬¨B ‚áí ¬¨A$. Ich w√ºrde das ja\n"
"statt *Kontraposition* oder `not_imp_not` eher *von_hinten_durch_die_Brust_ins_Auge* nennen.\n"
"Aber gut, ich will mich nicht einmischen."
msgstr ""

#: Game.Levels.Contradiction.L04_ByContra
msgid "**Robo**: Fang doch mal mit `constructor` an."
msgstr ""

#: Game.Levels.Contradiction.L04_ByContra
msgid "**Robo**: Ich w√ºrde wieder mit `suffices g : B` einen Widerspruch herbeif√ºhren."
msgstr ""

#: Game.Levels.Contradiction.L04_ByContra
msgid "**Robo**: Hier w√ºrde ich ebenfalls einen Widerspruchsbeweis anfangen."
msgstr ""

#: Game.Levels.Contradiction.L04_ByContra
msgid "**Robo**: `suffices g : ¬¨ A` sieht nach einer guten Option aus."
msgstr ""

#: Game.Levels.Contradiction.L04_ByContra
msgid ""
msgstr ""

#: Game.Levels.Predicate.L01_Ring
msgid "Nat√ºrliche Zahlen"
msgstr ""

#: Game.Levels.Predicate.L01_Ring
msgid "Du schaust dir die erste Seite an."
msgstr ""

#: Game.Levels.Predicate.L01_Ring
msgid "**Du**: Das ist doch Schulmathematik! Man rechnet das einfach aus,\n"
"indem man die Terme umsortiert.\n"
"\n"
"**Robo**: Wenn die Gleichung stimmt, kannst du auf Leansch sogar einfach\n"
"mit `ring` beweisen, dass das so ist.\n"
"\n"
"**Du**: Aber `‚Ñï` ist doch gar kein Ring?\n"
"\n"
"**Robo**: `ring` funktioniert sogar f√ºr sogenannte Halbringe. Ich glaube,\n"
"man sagt `ring`, weil es in (kommutativen) Ringen am besten funktioniert."
msgstr ""

#: Game.Levels.Predicate.L01_Ring
msgid ""
msgstr ""

#: Game.Levels.Predicate.L02_Rewrite
msgid "Rewrite"
msgstr ""

#: Game.Levels.Predicate.L02_Rewrite
msgid ""
msgstr ""

#: Game.Levels.Predicate.L02_Rewrite
msgid "**Du**: Schau mal, dieses Problem sieht so √§hnlich aus wie eines, das wir auf *Implis*\n"
"schon gel√∂st hatten.\n"
"Nur, das hier jetzt Gleichheiten von Zahlen statt Genau-Dann-Wenn-Aussagen stehen!\n"
"\n"
"**Robo**: Richtig. Und im Grunde macht das gar keinen Unterscheid.\n"
"Du kannst `=` und `‚Üî` praktisch mit `rw` praktisch gleich behandeln."
msgstr ""

#: Game.Levels.Predicate.L02_Rewrite
msgid "**Du**: Also auch `rw [h‚Çì]` und `rw [‚Üê h‚Çì]`?\n"
"\n"
"**Robo**: Probiers doch einfach."
msgstr ""

#: Game.Levels.Predicate.L02_Rewrite
msgid "**Du**: Wie war das nochmals mit r√ºckw√§rts umschreiben?\n"
"\n"
"**Robo**: `‚Üê` ist `\\l`. Und dann `rw [‚Üê h‚Çì]`"
msgstr ""

#: Game.Levels.Predicate.L02_Rewrite
msgid ""
msgstr ""

#: Game.Levels.Predicate.L03_Rewrite
msgid "Rewrite"
msgstr ""

#: Game.Levels.Predicate.L03_Rewrite
msgid ""
msgstr ""

#: Game.Levels.Predicate.L03_Rewrite
msgid "$$\n"
"\\begin{aligned}\n"
"  a &= b \\\\\n"
"  a + a ^ 2 &= b + 1 \\\\\n"
"  \\vdash b + b ^ 2 &= b + 1\n"
"\\end{aligned}\n"
"$$"
msgstr ""

#: Game.Levels.Predicate.L03_Rewrite
msgid "**Du**: Hier muss man, glaube ich, einfach in Annahme `¬´{g}¬ª` die\n"
"Variable `¬´{a}¬ª` durch `¬´{b}¬ª` ersetzen.\n"
"\n"
"**Robo**: Genau! Das machst du mit `rw [¬´{h}¬ª] at ¬´{g}¬ª`."
msgstr ""

#: Game.Levels.Predicate.L03_Rewrite
msgid "**Robo**: Schau mal durch die Annahmen."
msgstr ""

#: Game.Levels.Predicate.L03_Rewrite
msgid "**Robo**: Noch ein Trick: Mit `rw [h] at *` kann man gleichzeitig mittels `h` **alle**\n"
"Annahmen und das Goal umschreiben."
msgstr ""

#: Game.Levels.Predicate.L04_Ring
msgid "Nat√ºrliche Zahlen"
msgstr ""

#: Game.Levels.Predicate.L04_Ring
msgid ""
msgstr ""

#: Game.Levels.Predicate.L04_Ring
msgid "**Du**: Ich vermute, wenn ich zuerst alles so umschreibe, dass\n"
"das Beweisziel nur noch rechnen und umsortieren zu beweisen ist, erledigt `ring` den Rest!\n"
"\n"
"**Robo**: Genau. Und noch ein Trick: Zwei Schritte `rw [h‚ÇÅ]` und `rw [h‚ÇÇ]` kann man zu\n"
"einem einzigen Schritt zusammenfassen: `rw [h‚ÇÅ, h‚ÇÇ]`."
msgstr ""

#: Game.Levels.Predicate.L04_Ring
msgid ""
msgstr ""

#: Game.Levels.Predicate.L05_Rfl
msgid "Definitionally equal"
msgstr ""

#: Game.Levels.Predicate.L05_Rfl
msgid "Beim n√§chsten Problem bekommt ihr ausnahmsweise Hilfe vom Publikum.\n"
"\n"
"**Alle**: `rfl`, `rfl`, ‚Ä¶"
msgstr ""

#: Game.Levels.Predicate.L05_Rfl
msgid "**Du**: Wieso nicht `ring`?\n"
"\n"
"**Robo**: Klar, `ring` w√ºrde normalerweise auch funktioneren. Aber ich w√ºrde mich hier\n"
"dem Mehrheitswillen beugen ‚Ä¶"
msgstr ""

#: Game.Levels.Predicate.L05_Rfl
msgid "**Robo**: Der Grund, warum hier ausnahmsweise auch mal `rfl` funktioniert hat, ist, dass auf beiden Seiten tats√§chlich *per Definition* dasselbe steht. Das soll hei√üen, wenn man links in `1 + 1` die Definition von `1` und `+ 1` einsetzt, und rechts die Definition von `2`, dann erh√§lt man *buchst√§blich* dasselbe (n√§mlich `(0.succ).succ`).\n"
"\n"
"**Du**: Na sch√∂n. Muss ich mir jetzt diese Definition von `2` merken?\n"
"\n"
"**Robo**: Ich glaube eher nicht."
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "Gerade/Ungerade"
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "Ihr habt nun alle Fragen aus dem k√∂niglichen P√§ckchen beantwortet, und die Formalosophinnen\n"
"applaudieren. Dann wollen Sie aber auch noch ein paar Fragen stellen, aber sie k√∂nnen sich\n"
"nicht einigen, welche.\n"
"Ihr h√∂rt abwechselnd die Rufe ‚ÄûEven‚Äú und ‚ÄûOdd‚Äú aus der Menge heraus. Deshalb zeigt dir Robo\n"
"vorsichtshalber schon einmal die entsprechenden Definitionen an:\n"
"\n"
"```\n"
"def Even (n : ‚Ñï) : Prop := ‚àÉ r, n = r + r\n"
"```\n"
"\n"
"und\n"
"\n"
"```\n"
"def Odd (n : ‚Ñï) : Prop := ‚àÉ r, n = 2 * r + 1\n"
"```\n"
"\n"
"Schlie√ülich taucht von irgendwo aus der Menge folgendes Papier auf:"
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "**Robo**: Wie du oben siehst, ist `Even n` dadurch definiert,\n"
"dass ein `r` existiert so dass `r + r = n` ist. Am besten\n"
"√∂ffnest du diese Definition mit `unfold Even at *` einmal.\n"
"Dann siehst du besser, was los ist."
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "Robo**: Am besten machst du auch noch `unfold Even at h`, damit du verstehst, was los ist."
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "Ein verwirrtes murmeln geht durch die Menge.\n"
"\n"
"**Du**: Warte mal, wieso ist `n^2 / 2` √ºberhaupt wieder eine nat√ºrliche Zahl?\n"
"\n"
"**Robo**: Division auf `‚Ñï` wird in Lean immer abgerundet. F√ºr `n = 1` steht da also\n"
"\n"
"```\n"
"1^2 = (1^2) / 2 + (1^2)/2\n"
"```\n"
"\n"
"was ausgerechnet `1 = 1/2 + 1/2 = 0 + 0` ist, du bist also auf dem Holzweg!"
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "**Du**: Also von `¬´{h}¬ª` wei√ü ich jetzt, dass ein `r` existiert, so dass `r + r = n` ‚Ä¶\n"
"\n"
"**Robo**: Mit `rcases h with ‚ü®r, hr‚ü©` kannst du dieses `r` tats√§chlich einf√ºhren."
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "**Du**: Und jetzt muss ich eine passende Zahl finden, so dass `x + x = n^2`?\n"
"\n"
"**Robo**: Genau. Und mit `use _` gibst du diese Zahl an."
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "**Robo**: Also sowas √§hnliches wie `use 4 * r ^ 3`, aber ich kann\n"
"dir leider nicht sagen, welche Zahl passt."
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "**Robo**: Das geht auch, jetzt musst du aber wirklich `use` verwenden."
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "**Du**: Ah, und jetzt `ring`!"
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "**Du**: Ah, und jetzt `ring`!\n"
"\n"
"**Robo**: Aber zuerst musst du noch mit\n"
"`rw` `n` durch `r + r` ersetzen, da `ring` das sonst nicht wei√ü."
msgstr ""

#: Game.Levels.Predicate.L06_Exists
msgid "Applaus!"
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "Gerade/Ungerade"
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "Sofort taucht das n√§chste Blatt auf. Anscheinend hatten sie sich auf einen Kompromiss geeinigt."
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "**Robo**: mit `rcases h with ‚ü®r, hr‚ü©` kannst du wieder\n"
"das `r` nehmen, das laut Annahme existieren muss.\n"
"\n"
"**Robo**: Oder aber, du f√§ngst mit `unfold Odd at *` an."
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "**Robo**: Mit `unfold Odd at *` √∂ffnest du alle Definitionen von `Odd`."
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "**Robo**: mit `rcases h with ‚ü®r, hr‚ü©` kannst du wieder\n"
"das `r` nehmen, das laut Annahme existieren muss."
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "**Robo**: Ich hab noch einen Trick auf Lager:\n"
"Wenn du jetzt noch nicht wei√üt, welche Zahl du einsetzen musst, k√∂nntest\n"
"du schon jetzt mit `rw [¬´{hr}¬ª]` weitermachen ‚Ä¶"
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "**Robo**: Wenn du jetzt `ring` brauchst, dann schreibt es einfach alles in\n"
"Normalform um, das hilft beim Vergleichen."
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "**Robo**: Ich hab noch einen Trick auf Lager:\n"
"Wenn du jetzt noch nicht wei√üt, welche Zahl du einsetzen musst, k√∂nntest\n"
"Du schon jetzt mit `rw [¬´{hr}¬ª]` weitermachen‚Ä¶"
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "**Robo**: Wenn du jetzt `ring` brauchst, dann schreibt es einfach alles in\n"
"Normalform um, das hilft beim Vergleichen."
msgstr ""

#: Game.Levels.Predicate.L07_Exists
msgid "Applaus!"
msgstr ""

#: Game.Levels.Predicate.L08_Forall
msgid "F√ºr alle"
msgstr ""

#: Game.Levels.Predicate.L08_Forall
msgid "Nach l√§ngerem Durcheinander findet ein weiteres Blatt aus der Menge zu Euch."
msgstr ""

#: Game.Levels.Predicate.L08_Forall
msgid "**Du**: Das `‚àÄ` heisst sicher \"f√ºr alle\".\n"
"\n"
"**Robo**: Und man schreibt `\\forall`. Ein `‚àÄ x, ‚Ä¶` im Beweisziel kannst du wie eine\n"
"Implikation mit `intro x` angehen."
msgstr ""

#: Game.Levels.Predicate.L08_Forall
msgid "Wieder werdet Ihr mit einem Applaus belohnt, und die Formalosophinnen\n"
"beratschlagen sich, was sie Euch noch vorlegen wollen."
msgstr ""

#: Game.Levels.Predicate.L09_PushNeg
msgid "PushNeg"
msgstr ""

#: Game.Levels.Predicate.L09_PushNeg
msgid "**Robo**: W√§hrend wir warten, zeig ich dir vielleicht kurz, wie sich Negation mit Quantoren vertr√§gt. Ich habe so ein Gef√ºhl, dass wir das gleich brauchen werden."
msgstr ""

#: Game.Levels.Predicate.L09_PushNeg
msgid "**Du**: Was ist denn jetzt dieses P?\n"
"\n"
"**Robo**: P ist wieder irgendeine Aussage; eine Aussage √ºber Objekte vom Typ `X`.\n"
"Zum Beispiel k√∂nnte `X` wieder der Typ der nat√ºrlichen Zahlen sein.\n"
"Und `P x` k√∂nnte die Aussage sein:\n"
"Die nat√ºrliche Zahl `x` ist gerade. Oder: `x` hat sieben Primfaktoren. Oder: `x` ist Robo's Lieblingszahl. Oder ‚Ä¶\n"
"\n"
"**Du**: Schon gut, ich glaub ich habs verstanden. `P` ist sozusagen eine Abbildung, die ein Element `x : X` nimmt und auf eine Aussage wirft.\n"
"\n"
"**Robo**: Ja, sozusagen.\n"
"\n"
"**Du**: Gut. Dann ist auch ziemlich klar, was hier die Aussage ist.\n"
"Und du wolltest mir jetzt verraten, wie ich das auf Leansch zeige?\n"
"\n"
"**Robo**: Genau. Was du brauchst, ist `push_neg`."
msgstr ""

#: Game.Levels.Predicate.L09_PushNeg
msgid "**Robo**: Das ist jetzt trivial, oder?"
msgstr ""

#: Game.Levels.Predicate.L09_PushNeg
msgid "**Robo**: `push_neg` schiebt von links nach rechts. Du kannst es hier also nicht auf\n"
"das Beweisziel anwenden, wohl aber auf `¬´{h}¬ª`."
msgstr ""

#: Game.Levels.Predicate.L09_PushNeg
msgid "**Robo**: Gut gemacht. Intern benutzt `push_neg` √ºbringens zwei Lemmas:\n"
"\n"
" - `not_exists (A : Prop) : ¬¨ (‚àÉ x, A) ‚Üî ‚àÄx, (¬¨A)`\n"
" - `not_forall (A : Prop) : ¬¨ (‚àÄ x, A) ‚Üî ‚àÉx, (¬¨A)`\n"
"\n"
"Das erste Lemma ist die Aussage, die du gerade gezeigt hast.\n"
"\n"
"**Du**: Na toll. Ich habe die Aussage also gezeigt, indem ich sie benutzt habe ‚Ä¶\n"
"\n"
"**Robo**: :-) Hauptsache, Du merkst dir `push_neg`."
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "PushNeg"
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "Nach langem Hin und Her haben sich die Formalosophinnen endlich auf folgende Frage geeignet."
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "**Du**: Oha. Ganz links ein `¬¨`. Was du nicht sagst ‚Ä¶"
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "**Robo**: Dieser L√∂sungsweg scheint mir etwas zu schwierig.\n"
"Ich w√ºrde nochmal zur√ºckgehen und `Odd` behalten,\n"
"damit man schlussendlich `even_iff_not_odd` brauchen kann!"
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "**Robo**: Dieser L√∂sungsweg scheint mir etwas zu schwierig.\n"
"Ich w√ºrde nochmal zur√ºckgehen und `Odd` behalten,\n"
"damit man schlussendlich `even_iff_not_odd` brauchen kann!"
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "**Robo**: Jetzt brauchst du eine Zahl mit `use`, und danach vermutlich das\n"
"Lemma `even_iff_not_odd` brauchen.\n"
"\n"
"**Du**: K√∂nnte ich jetzt schon `even_iff_not_odd` anwenden?\n"
"\n"
"**Robo**: Nein, `rw` kann nicht innerhalb von Quantoren umschreiben.\n"
"\n"
"**Du**: Aber wie w√ºrde ich das machen?\n"
"\n"
"**Robo**: Zeig ich dir sp√§ter, nicht hier vor gro√üem Publikum.\n"
"Ich w√ºrde jetzt lieber mit `use` eine richtige Zahl angeben, und danach umschreiben."
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "**Robo**: Gute Wahl! Jetzt kannst du `even_iff_not_odd` verwenden."
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "**Robo**: Gute Wahl! Jetzt kannst du `even_iff_not_odd` verwenden."
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "**Robo**: Gute Wahl! Jetzt kannst du `even_iff_not_odd` verwenden."
msgstr ""

#: Game.Levels.Predicate.L10_PushNeg
msgid "Die Formalosophinnen sind ganz begeistert.\n"
"Nachdem sich der Beifall gelegt hat, hast du auch einmal eine Frage.\n"
"\n"
"**Du**: Kann uns hier irgendjemand vielleicht ein bisschen Orientierung im Formaloversum geben?\n"
"\n"
"**Alle**: Ja, ja.\n"
"\n"
"**Du**: Wer denn?\n"
"\n"
"Die Frage war wieder zu konkret. Betretenes Schweigen."
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "Drinker's Paradox"
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "**Du**: K√∂nnte ihr eigentlich immer nur im Chor oder durcheinander reden?\n"
"\n"
"Wieder herrscht l√§ngeres Schweigen. Dann auf einmal:\n"
"\n"
"**Alle**: Es gibt unter uns eine Person, wenn die redet, dann reden alle!\n"
"\n"
"Du kratzt Dich am Kopf.\n"
"\n"
"**Robo**: Ist doch klar. Das ist auf jedem bewohnten Planeten so!\n"
"\n"
"**Du**: Was??\n"
"\n"
"**Robo**: Das ist eine Version vom Drinker's Paradox! Kennst du das nicht? Dann lies\n"
"das am besten Mal in deiner Handbibliothek nach! *In jeder Bar gibt es eine Person mit\n"
"der Eigenschaft, dass alle trinken, wenn sie trinkt.* Genauer gesagt: in jeder nicht-leeren Bar.\n"
"\n"
"**Du**: Glaube ich nicht.\n"
"\n"
"**Robo**: Glaube ich schon. Ich glaube sogar, du kannst das beweisen. Hier, probier mal!"
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "**Du**: Also, `isDrinking` ist wieder so ein Pr√§dikat ‚Ä¶\n"
"Wenn `p` eine Person ist, ist `isDrinking p` eine Aussage,\n"
"die wahr oder falsch ist. Soweit so gut.\n"
"Und was bedeutet `Nonempty People`?\n"
"\n"
"**Robo**: Das ist Leansch f√ºr nicht-leer. Das hei√üt einfach, es gibt mindestens eine Person.\n"
"Mit `rcases ¬´{h_nonempty}¬ª with ‚ü®pers‚ü©` kannst du dir eine `pers : Person` aussuchen,\n"
"die es per Annahme gibt.\n"
"\n"
"**Du**: Und wie fang ich jetzt an?\n"
"\n"
"**Robo**: Ich sagte doch, schau am besten Mal in deine Handbibliothek.\n"
"Wenn ich mich richtige erinnere, hilft eine Fallunterscheidung, ob die Aussage\n"
"`‚àÄ (y : People), isDrinking y` wahr oder falsch ist."
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "**Robo**: Schau mal `by_cases` an."
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "**Du**: Und wen nehm ich jetzt?\n"
"\n"
"**Robo**: Wie gesagt, `rcases h_nonempty with ‚ü®d‚ü©` gibt dir eine x-beliebige Person `d`."
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "**Robo**: Du k√∂nntest hier mit `push_neg at ¬´{h}¬ª` weitermachen."
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "**Du**: Also nach `¬´{h}¬ª` existiert ja eine Person, die nicht trinkt. K√∂nnte ich diese brauchen damit die Aussage trivialerweise wahr wird?\n"
"\n"
"**Robo**: Schau dir mal an wie man `rcases` auf die Annahme `¬´{h}¬ª` anwenden k√∂nnte."
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "**Robo**: Was siehst du, wenn du `¬´{hp}¬ª` und `¬´{hp'}¬ª` anschaust?"
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "`Nonempty U` ist eine Instanz, die aussagt, dass `U` mindestens ein Element\n"
"enth√§lt.\n"
"\n"
"Wenn `h : Nonempty U`, dann kriegt man mit `rcases h with ‚ü®d‚ü©` eine solches Element `d : U`."
msgstr ""

#: Game.Levels.Predicate.L11_DrinkersParadox
msgid "**Du**: Verstehe. Aber jetzt habe ich auch wirklich genug von dieser Pr√§dikatenlogik!\n"
"\n"
"**Robo**: Dann fliegen wir am besten weiter! Aber bevor du fragst ‚Äì hier ist wieder ein √úberblick, was du auf diesem Planeten gelernt hast.\n"
"\n"
"\n"
"|               | Beschreibung                |\n"
"|:--------------|:----------------------------|\n"
"| `‚Ñï`           | Die nat√ºrlichen Zahlen.     |\n"
"| `‚àÉ`           | Existential-Quantifier      |\n"
"| `‚àÄ`           | Forall-Quantifier           |\n"
"| `Even n`      | `n` ist gerade              |\n"
"| `Odd n`       | `n` ist ungerade            |\n"
"\n"
"|       | Taktik                    | Beispiel                                               |\n"
"|:------|:--------------------------|:-------------------------------------------------------|\n"
"| *12·∂ú* | `rw`                      | Umschreiben mit Gleichungen.                           |\n"
"| 13    | `ring`                    | L√∂st Gleichungen mit `+, -, *, ^`.                     |\n"
"| 14    | `unfold`                  | Setzt visuell die Bedeutung einer Definition ein.      |\n"
"| 15    | `use`                     | Um ein `‚àÉ` im Goal anzugehen.                          |\n"
"| *7·∂ú*  | `rcases h with ‚ü®x, hx‚ü©`   | Um ein `‚àÉ` in den Annahmen zu zerlegen.                |\n"
"| *8·µá*  | `intro`                   | Um ein `‚àÄ` im Goal anzugehen.                          |\n"
"| 16    | `push_neg`                | F√ºr `¬¨‚àÉ` und `¬¨‚àÄ` im Goal.                             |"
msgstr ""

#: Game.Levels.Predicate
msgid "Quantus"
msgstr ""

#: Game.Levels.Predicate
msgid "Auf Quantus erwartet Euch bereits eine gro√üe Ansammlung von Formalosopheninnen.\n"
"Sie reden alle wild durcheinander und Ihr habt Probleme, Euch √ºberhaupt Geh√∂r zu verschaffen.\n"
"Robo produziert schlie√ülich ein lautes Gong-Ger√§usch, das sie kurzzeitig zur Ruhe bringt.\n"
"\n"
"**Du**: Wir haben einen Brief f√ºr Eure K√∂nigin. K√∂nntet Ihr uns zu Eurer K√∂nigin f√ºhren?\n"
"\n"
"**Alle** *(im Chor)*: Wir sind schon alle hier!\n"
"\n"
"**Du**: Okay. Und wer von Euch ist die K√∂nigin?\n"
"\n"
"Nun herrscht betretenes Schweigen. Alle zucken mit den Schultern.\n"
"\n"
"**Du**: Habt Ihr √ºberhaupt eine K√∂nigin?\n"
"\n"
"**Alle** *(im Chor)*: Ja, ja. Wir haben eine K√∂nigin, wir haben eine K√∂nigin.\n"
"\n"
"**Robo** *(zu dir)*: Ich fasse mal zusammen. Es existiert eine K√∂nigin, aber keiner wei√ü, wer\n"
"sie ist ‚Ä¶\n"
"\n"
"**Du**: Ist das nicht ein Widerspruch?\n"
"\n"
"**Robo**: Fragst du, du als Mathematiker? Nein, das ist kein Widerspruch. Das ist einfach eine\n"
"‚Äûreine Existenzaussage‚Äú.\n"
"\n"
"Du bist dir nicht ganz sicher, wie ernst er das meint.\n"
"\n"
"**Du**: Dann schlage ich vor, wir √ºbergeben das P√§ckchen einfach an *alle* Bewohner. Dann haben\n"
"wir es ja insbesondere der K√∂nigin √ºbergeben.\n"
"\n"
"**Du** *(in die Menge)*: Wir haben Euch ein P√§ckchen von Implis gebracht. Hier, das ist f√ºr Euch.\n"
"\n"
"Robo spuckt es aus, wirft es in die Menge, und die Formalosophinnen rei√üen es auf. Darin befinden\n"
"sich ein paar lose Seiten, die sie sofort eingehend studieren.\n"
"\n"
"Zwei Minuten sp√§ter liegen die Seiten wieder bei Euch. Es sind wieder mathematische Probleme.\n"
"Und die Formalosophinnen wollen sehen, wie Ihr sie l√∂st."
msgstr ""

#: Game.Levels.Contradiction.L05_Contrapose
msgid "Kontraposition"
msgstr ""

#: Game.Levels.Contradiction.L05_Contrapose
msgid "**Benedictus**: Gut, hier ist die angek√ºndigte Frage. Versucht mal einen *direkten*\n"
"Beweis, ohne `by_contra`."
msgstr ""

#: Game.Levels.Contradiction.L05_Contrapose
msgid "**Robo**: Ich schlage vor, wir f√ºhren das auf das Lemma `even_square` zur√ºck, das wir auf\n"
"Quantus schon gezeigt hatten. Hier steht ja im Grunde `Odd (n^2) ‚Üí Odd n`. Und unter\n"
"Kontraposition ist das √§quivalent zu `Even n ‚Üí Even (n^2)`.\n"
"\n"
"**Du**: Richtig. Von hinten durch die Brust ‚Ä¶ Aber warte, im Moment steht da doch gar kein `‚Üí`.\n"
"\n"
"**Robo**: Erinner dich an `revert`. Mit `revert ¬´{h}¬ª` kannst du die Annahme `¬´{h}¬ª` als\n"
"Implikationsannahme ins Beweissziel schieben."
msgstr ""

#: Game.Levels.Contradiction.L05_Contrapose
msgid "**Du**: Und jetzt kann ich dieses Kontrapositionslemma anwenden? Wie hie√ü das noch einmal?\n"
"\n"
"**Robo**: Tats√§chlich kannst auch einfach `contrapose` schreiben."
msgstr ""

#: Game.Levels.Contradiction.L05_Contrapose
msgid "**Robo**: Vielleicht hilft jetzt `even_iff_not_odd` weiter?"
msgstr ""

#: Game.Levels.Contradiction.L05_Contrapose
msgid "**Du**: Das sieht schon ganz gut aus. Jetzt kann ich tats√§chlich das alte Lemma\n"
"`even_square` anwenden!"
msgstr ""

#: Game.Levels.Contradiction.L05_Contrapose
msgid "**Benedictus**: Hervorragend! Ich glaube, damit seid Ihr jetzt ganz gut gewappnet."
msgstr ""

#: Game.Levels.Contradiction.L06_Summary
msgid "Contradiction"
msgstr ""

#: Game.Levels.Contradiction.L06_Summary
msgid "**Du**: Aber h√§tten wir die letzte Aufgabe nicht genauso gut per Widerspruch beweisen k√∂nnen?\n"
"\n"
"**Benedictus**: Klar. Ich dachte nur, ein zweiter Widerspruchsbeweis w√§re langweilig. Aber Ihr k√∂nnt die Aufgabe gern noch einmal probieren. Hier, ich gebe Sie Euch mit auf die Reise. Aber nun seht zu, dass Ihr weiterkommt!"
msgstr ""

#: Game.Levels.Contradiction.L06_Summary
msgid "Sobald Ihr Euch sicher vom Gravitationsfeld des Asteroiden befreit habt, beugt Ihr\n"
"Euch wieder √ºber die Aufgabe.\n"
"\n"
"**Robo**: Okay, also diesmal fangen wir mit `by_contra g` an!"
msgstr ""

#: Game.Levels.Contradiction.L06_Summary
msgid "**Robo**: Jetzt w√ºrde ich einen Widerspruch zu `Odd (n ^ 2)` f√ºhren."
msgstr ""

#: Game.Levels.Contradiction.L06_Summary
msgid "**Robo**: Also `suffices d : ¬¨ Odd (n ^ 2)`."
msgstr ""

#: Game.Levels.Contradiction.L06_Summary
msgid "**Robo**: Bravo! Hier ein √úberblick, was uns Benediktus gezeigt hat.\n"
"\n"
"\n"
"|       | Taktik          | Beispiel                                               |\n"
"|:------|:----------------|:-------------------------------------------------------|\n"
"| 17    | `have`          | Zwischenresultat annehmen                              |\n"
"| 18    | `suffices`      | Zwischenresultat annehmen                              |\n"
"| 19    | `by_contra`     | Widerspruch *(startet einen Widerspruchsbeweis)*       |\n"
"| *3*   | `contradiction` | *(schliesst einen Widerspruchsbeweis)*                 |\n"
"| 20    | `contrapose`    | Kontraposition                                         |\n"
"| *9*   | `revert`        | n√ºtzlich, um danach `contrapose` anzuwenden            |"
msgstr ""

#: Game.Levels.Contradiction
msgid "Spinoza"
msgstr ""

#: Game.Levels.Contradiction
msgid "**Robo**: Ich glaube, das ist Spinoza, einer der ganz wenigen Asteroiden vom Type QED. Schnell. Wir m√ºssen uns ein bisschen beeilen, sonst verpassen wir ihn.\n"
"\n"
"Eine halbe Stunde sp√§ter seid ihr gelandet. Sehr einladend wirkt Spinoza nicht. Seine gesamte Oberfl√§che ist von feinem, r√∂tlichen Sand bedeckt.\n"
"Ein einziger, einsamer Formalosoph, der sich als Benedictus vorstellt, erwartet euch.\n"
"\n"
"**Benedictus**: Sch√∂n, dass Ihr gekommen seid! Ich habe schon auf Euch gewartet!\n"
"\n"
"**Du**: Hast du auch ein paar dringende Fragen ‚Ä¶ ?\n"
"\n"
"**Benedictus**: Ach nein, aus dem Alter bin ich heraus. Aber ich kann mir denken, wie es Euch auf Implis und Quantus ergangen ist. Und glaubt, mir auf den anderen Planeten wird es nicht viel besser. Aber ich kann Euch vielleicht ein bisschen vorbereiten.\n"
"\n"
"**Du**: K√∂nnen wir nicht einfach hier bleiben und uns ein wenig ausruhen?\n"
"\n"
"Benedictus sch√ºttelt den Kopf.\n"
"\n"
"**Benedictus**: Nein. Spinoza vertr√§gt keine drei Bewohner. Und Ihr m√ºsst bald wieder weiter, sonst wird der Weg zu weit. Wir kommen nur alle 400 Jahre bei den Planeten vorbei."
msgstr ""

#: Game.Levels.OLDFunction.L01_Function
msgid "Anonyme Funktionen"
msgstr ""

#: Game.Levels.OLDFunction.L01_Function
msgid "Auf die Frage hin, ob sie von einer Bibliothek wisse, erz√§hlt euch das kleine M√§dchen,\n"
"dass es auf der Insel nur einen g√§be, aber sie bedr√§ngt euch so mit einer Frage,\n"
"dass sie euch gar nicht sagt, wo dieser zu finden sei."
msgstr ""

#: Game.Levels.OLDFunction.L01_Function
msgid "**Robo**: `f : ‚Ñ§ ‚Üí ‚Ñ§` ist die Notation f√ºr eine Funktion und `f x` ist diese Funktion\n"
"angewendet auf ein Element `(x : ‚Ñ§)`.\n"
"\n"
"**Du**: War `‚Üí` nicht eben noch eine Implikation?\n"
"\n"
"**Robo**: Doch, die brauchen das gleiche Zeichen f√ºr beides.\n"
"\n"
"**Du**: Dann ist `f : ‚Ñ§ ‚Üí ‚Ñ§` also einfach abstrakt irgendeine Funktion,\n"
"wie definiere ich aber jetzt konkret eine Abbildungsvorschrift?\n"
"\n"
"**Robo**: Man kennt hier eine Notation f√ºr eine anonyme Funktion:\n"
"`fun (x : ‚Ñ§) ‚Ü¶ x ^ 2` ist\n"
"\n"
"$$\n"
"\\begin{aligned}\n"
"f : \\mathbb{‚Ñ§} &\\to \\mathbb{‚Ñ§} \\\\\n"
"x &\\mapsto x ^ 2\n"
"\\end{aligned}\n"
"$$\n"
"\n"
"**Robo**: PS, `‚Ü¶` ist `\\mapsto`. Aber man kann auch stattdessen `=>` benutzen."
msgstr ""

#: Game.Levels.OLDFunction.L01_Function
msgid "**Du**: Ja aber was mach ich damit?\n"
"\n"
"**Robo**: Wie immer gehst du ein `‚àÉ` mit `use ‚Ä¶` an."
msgstr ""

#: Game.Levels.OLDFunction.L01_Function
msgid "**Du**: Zu was sich das wohl vereinfacht?"
msgstr ""

#: Game.Levels.OLDFunction.L01_Function
msgid "**Du**: Zu was sich das wohl vereinfacht?"
msgstr ""

#: Game.Levels.OLDFunction.L01_Function
msgid "Das M√§dchen wird kurz ruhig, dann beginnt es zu l√§cheln und zeigt strahlend\n"
"in eine Richtung. Ihr folgt ihrem Finger und euch f√§llt in weiter ferne eine pomp√∂se Struktur\n"
"auf einem flachen H√ºgel auf."
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "let"
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "Ihr macht euch auf in Richtung Bibliothek entlang kleiner Pfade zwischen verschiedensten Behausungen.\n"
"\n"
"**Du**: Sag mal, ich wei√ü jetzt dass ich eine Funktion als `fun x ‚Ü¶ x - 1` definieren kann,\n"
"aber wie kann ich ihr einen Namen geben?\n"
"\n"
"**Robo**: Wenn jemand hier lokal eine Funktion definiert, werden die dir\n"
"`f : ‚Ñ§ ‚Üí ‚Ñ§ := fun x ‚Ü¶ x - 1; ‚Ä¶` als Objekt mitgeben.\n"
"\n"
"**Robo**: Im Beweis hingegen, kannst du dir mit `let f := fun (x : ‚Ñ§) ‚Ü¶ x - 1` selbst eine\n"
"tempor√§re Definition machen."
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "**Du**: Ist `g ‚àò ¬´{f}¬ª` Komposition von Funktionen?\n"
"\n"
"**Robo**: Richtig! Das schreibt man mit `\\comp`.\n"
"\n"
"**Du** Und hier k√∂nnte ich also zuerst\n"
"`let g := fun (x : ‚Ñ§) ‚Ü¶ _` definieren, anstatt direkt\n"
"`use fun (x : ‚Ñ§) ‚Ü¶ _`?\n"
"\n"
"**Robo**: Genau! Das ist zwar praktisch das gleiche, aber kann manchmal n√ºtzlich sein."
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "**Robo**: `((fun (x : ‚Ñ§) ‚Ü¶ x - 3) ‚àò f) x` ist per Definition `(fun (x : ‚Ñ§) ‚Ü¶ x - 3) (f x)`,\n"
"aber mit `rw [comp_apply]` kann man das explizit umschreiben, aber `simp` kennt das\n"
"Lemma auch."
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "**Robo**: gute Wahl! Jetzt kannst du diese mit `use g` benutzen."
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "**Robo**: `(¬´{g}¬ª ‚àò f) x` ist per Definition `¬´{g}¬ª (f x)`, aber mit\n"
"`rw [comp_apply]` kann man das explizit umschreiben, aber `simp` kennt das\n"
"Lemma auch."
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "**Robo**: Das sieht nach einem Fall f√ºr `ring` aus."
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "**Robo**: `ring` sieht durch lokale Definitionen wie\n"
"`¬´{f}¬ª` und `¬´{g}¬ª` hindurch,\n"
"du kannst es also direkt benutzen."
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "Sagt dass `(f ‚àò g) x` das gleiche ist wie `f (g x)`."
msgstr ""

#: Game.Levels.OLDFunction.L02_Let
msgid "**Du**: Dann verstehst du etwas Mathe?\n"
"\n"
"**Robo**: Ich hatte ja keine Ahnung ob die generierte Aufgabe beweisbar ist‚Ä¶ aber offenbar\n"
"hatte ich Gl√ºck.\n"
"\n"
"Und damit erreicht ihr den H√ºgel mit der Bibliothek."
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "St√ºckweise Definition"
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "Endlich kommt ihr zur Bibliothek. Komischerweise stehen an der T√ºr\n"
"zwei W√§chtern. Der eine hat ein `f` auf seiner Brustplatte, der andere\n"
"ein `g` eingraviert. dieser gibt dir ein Blatt mit einer langen Zeilen am oberen Ende."
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "**Robo**: Schau mal, die beiden haben zwei Funktionen, eine davon mit st√ºckweiser Definition.\n"
"\n"
"**Du**: Also, ich soll zeigen, dass die beiden vertauschbar sind?\n"
"\n"
"**Robo**: Genau, am besten w√§hlst du mit `funext x` ein beliebiges Element aus, und zeigst das\n"
"dann f√ºr dieses."
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "**Du**: Ah und jetzt kann ich erst einmal `(g ‚àò f) ¬´{x}¬ª` zu `g (f ¬´{x}¬ª)` umschreiben?\n"
"\n"
"**Robo**: Mit `simp` klappt das."
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "**Robo**: Jetzt kannst du n√§mlich eine Fallunterscheidung\n"
"machen, `by_cases h : 0 ‚â§ ¬´{x}¬ª`.\n"
"\n"
"**Du**: Damit krieg ich die F√§lle `0 ‚â§ ¬´{x}¬ª` und `¬´{x}¬ª < 0`?\n"
"\n"
"**Robo**: Genau! Oder pr√§ziser `0 ‚â§ ¬´{x}¬ª` und `¬¨(0 ‚â§ ¬´{x}¬ª)`. Das ist nicht ganz das gleiche,\n"
"und man k√∂nnte mit dem Lemma `not_le` zwischen `¬¨(0 ‚â§ ¬´{x}¬ª)` und `0 > ¬´{x}¬ª` wechseln."
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "**Du**: Jetzt muss ich wohl doch mal die Definitionen brauchen.\n"
"\n"
"**Robo**: Dann brauch mal `simp [f, g]`!"
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "**Robo**: Jetzt hast du `rw [if_pos ¬´{h}¬ª]` zur Verf√ºgung um das if-then-else zu\n"
"reduzieren."
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "**Robo**: Nochmals `simp [f, g]`."
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "**Du**: Ah und die Verneinung von `if_pos` ist sicher ‚Ä¶"
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "**Robo**: `if_neg`, genau!"
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "Zufrieden tauschen die beiden W√§chter ihren Platz und geben so dabei den\n"
"Durchgang frei."
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "Wenn `h : A` ein beweis der Aussage `A` ist, dann reduziert\n"
"`rw [if_pos h]` reduziert eine Aussage `if A then B else C` zu `B`.\n"
"\n"
"Umgekehrt kann man `if_neg` verwenden wenn `h : ¬¨ A`."
msgstr ""

#: Game.Levels.OLDFunction.L03_Piecewise
msgid "Wenn `h : ¬¨ A` ein Beweis ist, dass Aussage `A` falsch ist, dann reduziert\n"
"`rw [if_neg h]` eine Aussage `if A then B else C` zu `C`.\n"
"\n"
"Umgekehrt kann man `if_pos` verwenden wenn `h : A`."
msgstr ""

#: Game.Levels.OLDFunction.L04_Injective
msgid "Injektivit√§t"
msgstr ""

#: Game.Levels.OLDFunction.L04_Injective
msgid "Ihr l√§uft durch verschiedenste G√§nge der Bibliothek, allesamt mit B√ºchern entlang der W√§nde.\n"
"\n"
"**Du**: Wenn wir w√ºssten, dass nur ein m√∂glicher Weg hierhin f√ºhrt, k√∂nnten wir\n"
"ausschliessen, dass wir im Kreis laufen.\n"
"\n"
"Pl√∂tzlich begegnet ihr einem √§lteren Wesen mit Fakel. Auf die Frage antwortet es mit folgendem:"
msgstr ""

#: Game.Levels.OLDFunction.L04_Injective
msgid "**Robo**: `Injective` ist als `‚àÄ {a b : U}, f a = f b ‚Üí a = b`\n"
"definiert, also kannst du mit `intro` anfangen.\n"
"\n"
"**Du**: Und wenn ich das nicht weiss?\n"
"\n"
"**Robo**: Dann schaust du mit `unfold Injective` in die Definition rein."
msgstr ""

#: Game.Levels.OLDFunction.L04_Injective
msgid "**Du**: Jetzt will ich wohl mit der Definition von `¬´{f}¬ª` die\n"
"Annahme `¬´{ha}¬ª` vereinfachen."
msgstr ""

#: Game.Levels.OLDFunction.L04_Injective
msgid "**Du** Woa das war ja einfach!"
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "Monotone Funktionen"
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "Sofort hakt die √§ltere Gestalt nach:"
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Du**: Hmm, das ist etwas schwieriger‚Ä¶\n"
"\n"
"**Robo**: Aber ich hab einen Trick auf Lager:\n"
"Das Lemma `StrictMono.injective` sagt, dass jede strikt monotone Funktion injektive ist,\n"
"und ich habe das Gef√ºhl Monotonie ist hier einfacher zu zeigen."
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Robo**: `apply` ist wonach du suchst."
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Robo**: Ich glaube, dieser Weg ist zu steinig. Fang doch nochmals von vorne an!"
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Robo**: Ich glaube, dieser Weg ist zu steinig. Fang doch nochmals von vorne an!"
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Du**: Jetzt m√∂chte ich strikte Monotonie von `n ^ 3` und `n + 3` separat zeigen,\n"
"schliesslich scheint es mir als w√§r das zweite wieder einfach.\n"
"\n"
"**Robo**: Daf√ºr hab ich `StrictMono.add` bereit!"
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Du**: Hmm, darauf hab ich jetzt wenig Lust. Gibt's daf√ºr auch was? Das gilt ja nur\n"
"wenn der Exponent ungerade ist.\n"
"\n"
"**Robo**: Du k√∂nntest mal `Odd.strictMono_pow` versuchen‚Ä¶"
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Du**: Ist das nicht ne Trivialit√§t? Warte mal!"
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Du**: Ha! Und dieser Teil funktioniert sicher gleich wie Injektivit√§t vorhin!"
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Du**: oder ‚Ä¶?\n"
"\n"
"**Robo**: Doch, doch. Schau mal mit `unfold` hinein in die Definition."
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "Dieses Lemma sagt `StrictMono f ‚Üí Injective f`."
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "F√ºr ungerades `n` is `x ‚Ü¶ x ^ n` strikt monoton.\n"
"\n"
"*Bemerkung*: Das Lemma ist im namespace `Odd`, damit man `hn.strictMono_pow` f√ºr den\n"
"Beweis `hn : Odd n` schreiben k√∂nnte."
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "Wenn `f,g` beide strikt monoton sind, dann ist es `f + g` auch."
msgstr ""

#: Game.Levels.OLDFunction.L05_Injective
msgid "**Du**: Danke vielmals!\n"
"\n"
"Und damit l√§sst das Wesen mitten im Gang stehen, wo es weiter √ºber Injektivit√§t nachdenkt."
msgstr ""

#: Game.Levels.OLDFunction.L06_Injective
msgid "Nicht Injektiv"
msgstr ""

#: Game.Levels.OLDFunction.L06_Injective
msgid "Weiterirrend kommt ihr an eine Verzweigung.\n"
"\n"
"**Robo**: Sieht beides gleich aus.\n"
"\n"
"Ein paar Schritte in den linken Korridor hinein seht ihr auf dem Boden ein Blatt mit Gekritzel.\n"
"\n"
"\n"
"**Du**: Hier haben wir wieder eine st√ºckweise Funktion\n"
"\n"
"$$\n"
"f(n) = \\begin{cases}\n"
"    n^2 & \\text{falls } n \\text{ gerade} \\\\\n"
"    n+1 & \\text{andernfalls.}\n"
"\\end{cases}\n"
"$$\n"
"\n"
"Darunter steht in leicht leuchtender Schrift:"
msgstr ""

#: Game.Levels.OLDFunction.L06_Injective
msgid "**Robo**: Das ist sicher ein Hinweis.\n"
"\n"
"**Du**: Aber `¬¨ Injective` sagt mir nichts‚Ä¶\n"
"\n"
"**Robo**: K√∂nntest du etwas mit `¬¨ ‚àÄ` anfangen? Dann k√∂nntest du ja `Injektive` zuerst √∂ffnen.\n"
"\n"
"**Du**: Dar√ºber haben wir doch mal was gelernt‚Ä¶"
msgstr ""

#: Game.Levels.OLDFunction.L06_Injective
msgid "**Robo**: Das war `push_neg`."
msgstr ""

#: Game.Levels.OLDFunction.L06_Injective
msgid "**Robo**: Das war `push_neg`."
msgstr ""

#: Game.Levels.OLDFunction.L06_Injective
msgid "**Du** Jetzt muss ich einfach ein Gegenbeispiel nennen, oder?\n"
"\n"
"**Robo** Genau! Welche beiden Zahlen m√∂chtest du denn verwenden?"
msgstr ""

#: Game.Levels.OLDFunction.L06_Injective
msgid "Als ihr das Problem gel√∂st habt, erschleicht euch ein starkes\n"
"Gef√ºhl, dass dies der falsche Weg ist.\n"
"Also geht ihr zur√ºck und nehmt die rechte Gabelung."
msgstr ""

#: Game.Levels.OLDFunction.L07_Surjective
msgid "Surjektive"
msgstr ""

#: Game.Levels.OLDFunction.L07_Surjective
msgid "Endlich kommt ihr in einen gro√üe, beleuchteten zentralen Raum.\n"
"Alle W√§nde sind voll mit B√ºchern und\n"
"in der Mitte sitzt an einem einsamen\n"
"Tisch ein Gelehrter, der tats√§chlich das gesuchte Buch zeigen kann.\n"
"\n"
"Bevor er dieses aush√§ndigt, will er aber folgendes wissen:"
msgstr ""

#: Game.Levels.OLDFunction.L07_Surjective
msgid "**Robo**: Die Definition von `Surjective f` ist `‚àÄ y, (‚àÉ x, f x = y)`.\n"
"\n"
"**Du**: Dann kann ich das auch einfach wie Quantifier behandeln?\n"
"\n"
"**Robo**: Schie√ü drauf los!"
msgstr ""

#: Game.Levels.OLDFunction.L07_Surjective
msgid "**Du**: das is doch eigentlich ganz einfach‚Ä¶ Kann man das denn\n"
"noch weiter vereinfachen?\n"
"\n"
"**Robo**: Wenn du `¬´{f}¬ª` auch einsetzt vermutlich schon."
msgstr ""

#: Game.Levels.OLDFunction.L07_Surjective
msgid "Der Gelehrte h√§ndigt euch schmunzelnd das Buch aus."
msgstr ""

#: Game.Levels.OLDFunction.L08_Bijective
msgid "Bijektivit√§t"
msgstr ""

#: Game.Levels.OLDFunction.L08_Bijective
msgid "**Du**: Ehm, und wie kommen wir da wieder raus?\n"
"\n"
"**Gelehrter**: Gerne zeige ich euch den Weg, nachdem ihr mir auch noch folgendes erkl√§rt:"
msgstr ""

#: Game.Levels.OLDFunction.L08_Bijective
msgid "**Robo** *(fl√ºsternd)*: `Bijectve f` ist als `Injective f ‚àß Surjective f` definiert.\n"
"\n"
"**Du**: Dann ist das ja ganz simpel!"
msgstr ""

#: Game.Levels.OLDFunction.L08_Bijective
msgid "Zufrieden dr√ºckt euch der Gelehrte eine neue Fackel in die Hand und\n"
"zeigt euch den Weg nach drau√üen."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "Inverse"
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "Eigentlich hast du nur beil√§ufig Robo gefragt, ob bijektiv nicht auch bedeute, dass\n"
"eine Inverse Funktion existiere. Jetzt steht ihr aber schon seit einer halben Stunde rum\n"
"und der Gelehrte m√∂chte wissen, wie das den genau ginge.\n"
"\n"
"Offensichtlich kennt er diese Aussage als `Function.bijective_iff_has_inverse` aus seinen B√ºchern,\n"
"aber er m√∂chte, dass du ihm das hier und jetzt nochmals von Grund auf zeigst."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Du**: Nah da sagt mir so manches nichts, aber ich kann ja mal mit dem `‚Üî` anfangen,\n"
"das kenn ich ja schon."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Tipp. Teil doch `Bijective` mit `rcases ¬´{h}¬ª with ‚ü®hI, hS‚ü©` in\n"
"`Injective` und `Surjective` auf!"
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Du**: Ja was ist eigentlich die Inverse von `¬´{f}¬ª`‚Ä¶?\n"
"\n"
"**Robo**: Hast du eine Idee?\n"
"\n"
"**Du**: Also von der Surjektivit√§t weiss ich, dass f√ºr alle `y` ein Urbild existiert\n"
"und mit der Injektivit√§t k√∂nnte ich dann zeigen, dass dieses eindeutig ist.\n"
"\n"
"**Robo**: Also Schritt f√ºr Schritt: Mit `fun y ‚Ü¶ (¬´{hS}¬ª y).choose ` kannst du eine Funktion\n"
"definieren, die `y` irgendein Urbild zuweist.\n"
"\n"
"**Du**: Die ist aber nicht wohldefiniert, oder?\n"
"\n"
"**Robo**: In der Mathe nicht. In Lean geht das ganz gut, aber es ist dann unm√∂glich etwas\n"
"dar√ºber zu beweisen, wenn es mehrere M√∂glichkeiten g√§be."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: fang mal mit `intro` an."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Gut! Auf zum Rechtsinversen! Fang auch hier wieder mit `intro` an."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: fang mal mit `intro` an."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Du**: kompliziert.\n"
"\n"
"**Robo**: Aber mit `simp` kannst du es ja etwas vereinfachen."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Du**: Das kann ich jetzt nicht zeigen solange ich nicht weiss, dass nur genau ein\n"
"Urbild besteht.\n"
"\n"
"**Robo**: Dann wende doch mit `apply ¬´{hI}¬ª` die Injektivit√§t an!"
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Dies ist jetzt eine etwas tautologische Aussage. In Lean ist das\n"
"`Exists.choose_spec`. Konkret `apply Exists.choose_spec (¬´{hS}¬ª (f x))`."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Gut! Auf zum Rechtsinversen! Fang auch hier wieder mit `intro` an."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Du**: Kann ich das vereinfachen?"
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Du**: Also wieder `Exists.choose_spec`?\n"
"\n"
"**Robo**: Genau! Diesmal mit dem Argument `(¬´{hS}¬ª x)`."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Die eine Richtung ist gezeigt. Jetzt auf zur R√ºckrichtung!"
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Zerlege `¬´{h}¬ª` noch soweit du kannst!"
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Das UND auch noch!"
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Das `Bijective` kannst du auch aufteilen."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Injektivit√§t ist der schwierige Teil. Fang mal an mit `intro`."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Im n√§chsten Schritt must du `LeftInverse` brauchen um das Goal\n"
"zu `g (f a) = g (f b)` zu wechseln: schau mal was du mit\n"
"`have w := ¬´{hL}¬ª ¬´{a}¬ª` kriegst und ob du das mit `rw` benutzen kannst."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Du**: Wenn die Argumente `f a = f b` gleich sind, ist dann auch `g (f a) = g (f b)`,\n"
"wie sag ich das?\n"
"\n"
"**Robo**: Also wenn du `f a = f b` hast, kannst du ja auch einfach damit umschreiben."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "Die Surjektivit√§t sollte einfacher sein."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Psst, mit `RightInverse g f` weisst du, dass `f (g x) = x`.\n"
"Hilft das rauszufinden was du hier brauchen musst?"
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "**Robo**: Du kannst die `RightInverse`-Annahme einfach mit `rw`\n"
"benutzen."
msgstr ""

#: Game.Levels.OLDFunction.L09_Inverse
msgid "Endlich entkommt ihr der Bibliothek.\n"
"\n"
"**Robo**: Da w√ºrden mich keine zehn Pferde nochmals hineinbringen!\n"
"\n"
"**Du**: Von wegen Pferden, wie viele PS hat eigentlich unser Raumschiff?"
msgstr ""

#: Game.Levels.OLDFunction
msgid "Abbildungen"
msgstr ""

#: Game.Levels.OLDFunction
msgid "Auf der Suche nach dem Buch der Urbilder landet ihr auf einem kleinen Mond, der bis auf\n"
"eine Insel komplett mit Wasser bedeckt zu sein scheint.\n"
"\n"
"Auf der Insel seht ihr verschiedene gro√üe und kleine Behausungen, manche aus Stroh und Holz,\n"
"vereinzelte aus Lehm.\n"
"\n"
"Planlos geht ihr zum ersten Haus bei dem jemand vorne au√üen sitzt."
msgstr ""

#: Game.Levels.Inequality.L01_LE
msgid "Kleinergleich"
msgstr ""

#: Game.Levels.Inequality.L01_LE
msgid "Du f√ºhlst dich ein wenig √ºberfahren, aber versuchst trotzdem, ein Gespr√§ch zu beginnen.\n"
"\n"
"**Du**: Ist gut, wir bem√ºhen uns, nichts durcheinander zu bringen. Ist es sehr schwer,\n"
"hier Ordnung zu halten.\n"
"\n"
"**Lina**: Nun, man muss schon das ein oder andere wissen ‚Ä¶ Zum Gl√ºck hilft mir Ritha.\n"
"Wenn Du mal probieren willst ‚Ä¶ hier ist mir gestern etwas verrutscht."
msgstr ""

#: Game.Levels.Inequality.L01_LE
msgid "**Robo**: Denk lieber nicht zu lange dar√ºber nach. Das ist eine Kuriosit√§t,\n"
"dass `m < n` auf `‚Ñï` per Definition als `m + 1 ‚â§ n` definiert ist!\n"
"\n"
"**Lina**: Du verdirbst den Witz! Ich wollte ihn doch nur testen."
msgstr ""

#: Game.Levels.Inequality.L01_LE
msgid "**Du**: Ha, ha ‚Ä¶ Und was muss man noch wissen?"
msgstr ""

#: Game.Levels.Inequality.L02_Pos
msgid "Kleinergleich"
msgstr ""

#: Game.Levels.Inequality.L02_Pos
msgid "**Lina**: Man muss zum Beispiel wissen, dass `n ‚â† 0` f√ºr nat√ºrliche Zahlen nichts anderes\n"
"bedeutet als `0 < n`.\n"
"\n"
"**Robo**: Und da gibts leider keinen Standard zu ‚Ä¶\n"
"\n"
"**Ritha**: Man kann das einfach mit `Nat.pos_iff_ne_zero` umschreiben. Aber wenn man neu hier\n"
"ist, sollte man das vielleicht noch einmal selbst beweisen?"
msgstr ""

#: Game.Levels.Inequality.L02_Pos
msgid "**Robo** (*fl√ºsternd*): Wenn du ein bisschen schwere Maschinerie auffahren willst,\n"
"um sie zu beeindrucken, hab ich was. Mach doch eine Fallunterscheidung ob `n` Null ist\n"
"oder nicht!\n"
"\n"
"**Du** (*fl√ºsternd*): Wer will hier wen beeindrucken?\n"
"\n"
"**Robo** (*laut und selbstsicher*): Wir fangen mit `rcases n` an!"
msgstr ""

#: Game.Levels.Inequality.L02_Pos
msgid "**Du**: Hmm, das muss man doch vereinfachen k√∂nnen.\n"
"\n"
"**Robo** (*fl√ºsternd*): Zweiter pomp√∂ser Auftritt: sag einfach `simp` und lass das alles\n"
"automatisch geschehen."
msgstr ""

#: Game.Levels.Inequality.L02_Pos
msgid "**Du**: Ah und jetzt falls `n ‚â† 0`."
msgstr ""

#: Game.Levels.Inequality.L02_Pos
msgid "**Robo**: Warte! F√ºr den Rest zitieren wir einfach ein anderes Lemma: `Nat.suc_pos`."
msgstr ""

#: Game.Levels.Inequality.L02_Pos
msgid "**Robo**: Warte! F√ºr den Rest zitieren wir einfach ein anderes Lemma: `Nat.suc_pos`."
msgstr ""

#: Game.Levels.Inequality.L02_Pos
msgid "**Du**: `simp` ist ja echt nicht schlecht ‚Ä¶"
msgstr ""

#: Game.Levels.Inequality.L03_Linarith
msgid "Linarith"
msgstr ""

#: Game.Levels.Inequality.L03_Linarith
msgid "**Ritha**: Und wie w√§r's hiermit?"
msgstr ""

#: Game.Levels.Inequality.L03_Linarith
msgid "**Du**: `simp` geht hier nicht vermutlich nicht ‚Ä¶\n"
"\n"
"**Robo**: Nein, ist ja auch keine Vereinfachung, die du machen willst.\n"
"\n"
"**Lina**: Hier brauchst Du unser absolutes Powertool!\n"
"\n"
"**Ritha**: `linarith`"
msgstr ""

#: Game.Levels.Inequality.L03_Linarith
msgid "**Du**: Naja, so beeindruckend war das jetzt auch noch nicht."
msgstr ""

#: Game.Levels.Inequality.L04_Linarith
msgid "Linarith"
msgstr ""

#: Game.Levels.Inequality.L04_Linarith
msgid "**Robo**: Dann versuchs mal hiermit!\n"
"\n"
"$$\n"
"\\begin{aligned}\n"
"  5 * y &\\le 35 - 2 * x \\\\\n"
"  2 * y &\\le x + 3\n"
"\\end{aligned}\n"
"$$"
msgstr ""

#: Game.Levels.Inequality.L04_Linarith
msgid "**Du**: Boah, nicht schlecht."
msgstr ""

#: Game.Levels.Inequality
msgid "Luna"
msgstr ""

#: Game.Levels.Inequality
msgid "Robo hat einen kleinen Mond entdeckt, auf den ihr jetzt zusteuert.\n"
"Er hat eine ganz glatte Oberfl√§che, aber an einer Stelle hat die Oberfl√§che eine kleine\n"
"√ñffnung, von der eine Treppe ins Innnere f√ºhrt. Ihr landet und steigt neugierig hinab.\n"
"\n"
"Unten angekommen findest du dich in der aufger√§umtesten Wohnung wieder, die du je gesehen hast.\n"
"Ein kleines M√§dchen begr√º√üt Euch.\n"
"\n"
"**Lina**: Ich bin Lina, die einzige Bewohnerin von Luna.\n"
"\n"
"Dann sieht sie Robo.\n"
"\n"
"**Lina**: Naja, eigentlich sind wir hier auch zu zweit ‚Ä¶\n"
"\n"
"Sie dreht sich um und ruft etwas, da kommt ein Smart-Elf angefahren.\n"
"\n"
"**Lina**: Das ist Ritha!\n"
"\n"
"Robo findet sie offensichtlich s√º√ü.\n"
"\n"
"**Lina**: Aber jetzt steht mal hier nicht so unordentlich herum, bitte! Schuhe und Helme dort\n"
"und dort verstauen, und dann stellt Euch auf die markierten Besucher-Standpunkte. Sonst komme\n"
"ich hier noch ganz durcheinander."
msgstr ""

#: Game.Levels.Proposition.L00_Tauto
msgid "Automatisierung"
msgstr ""

#: Game.Levels.Proposition.L00_Tauto
msgid "Gerade seid Ihr auf K√∂nigin *Logisindes* Planeten. Sie kommt ohne Umschweife zum Punkt:\n"
"\n"
"**Logisinde**: Werte Wesen aus fremden Welten, gestatten Sie eine Frage. Warum gilt ‚Ä¶\n"
"\n"
"Und sie kritzelt etwas auf ein St√ºck Papier: oben ein paar Annahmen, unten eine Schlussfolgerung.\n"
"Dazwischen sollst du offenbar einen Beweis eintragen.\n"
"Du siehst Robo hilflos an."
msgstr ""

#: Game.Levels.Proposition.L00_Tauto
msgid ""
msgstr ""

#: Game.Levels.Proposition.L00_Tauto
msgid "**Robo**: Das ist ganz einfach. Mit `¬´{A}¬ª ¬´{B}¬ª ¬´{C}¬ª : Prop` meint sie:\n"
"`¬´{A}¬ª`, `¬´{B}¬ª` und `¬´{C}¬ª` sind irgendwelche Aussagen (*propositions*).\n"
"Und mit `‚Üí` meint sie ‚áí, also ‚Äúimpliziert‚Äù. Die anderen Symbole kennst du, oder?\n"
"\n"
"**Du**: Ehhm, ja. Aber da muss ich jetzt trotzdem erst einmal √ºberlegen.\n"
"\n"
"**Robo**: (fl√ºsternd) Behaupte doch einfach, dass sei eine Tautologie.\n"
"\n"
"**Du**: Ernsthaft?\n"
"\n"
"**Robo**: Ja. Schreib einfach `tauto`.\n"
"\n"
"**Robo**: Mach schon ‚Ä¶"
msgstr ""

#: Game.Levels.Proposition.L00_Tauto
msgid "**Logisinde**: (etwas konsterniert) Ja, das ist streng genommen richtig.\n"
"Aber glaubt blo√ü nicht, dass Ihr damit auf *diesem* Planeten viel weiterkommt!\n"
"Meine Untertanen verstehen `tauto` nicht. Da m√ºsst Ihr Euch schon etwas mehr anstrengen."
msgstr ""

#: Game.Levels.Proposition.L01_Rfl
msgid "Aller Anfang ist... ein Einzeiler?"
msgstr ""

#: Game.Levels.Proposition.L01_Rfl
msgid "In der Zwischenzeit hat bereits sich eine lange Schlange Untertanen gebildet, die gern ihren\n"
"Fragen stellen w√ºrden. Logisinde winkt den ersten nach vorn. Er r√§uspert sich.\n"
"\n"
"**Untertan**: Warum ist $42 = 42$?\n"
"\n"
"Du schaust ihn fassungslos an.\n"
"Er schreibt es dir wieder auf."
msgstr ""

#: Game.Levels.Proposition.L01_Rfl
msgid "**Robo**: Ist doch klar. Du musst ihn einfach daran erinnern,\n"
"dass Gleichheit *reflexiv* ist. Probier mal `rfl`."
msgstr ""

#: Game.Levels.Proposition.L01_Rfl
msgid "**Untertan**: Ah, richtig. Ja, Sie haben ja so recht. Das vergesse ich immer. Rfl, rfl, rfl ‚Ä¶"
msgstr ""

#: Game.Levels.Proposition.L02_Assumption
msgid "Annahmen"
msgstr ""

#: Game.Levels.Proposition.L02_Assumption
msgid "W√§hrend der erste Untertan noch rfl, rfl, rfl murmelt, tritt schon der n√§chste nach vorne. Es ist sch√ºchtern und schreibt blo√ü."
msgstr ""

#: Game.Levels.Proposition.L02_Assumption
msgid "**Robo**: `¬´{n}¬ª : ‚Ñï` bedeutet, `¬´{n}¬ª` ist eine nat√ºrliche Zahl.\n"
"\n"
"**Du**: Warum schreibt er dann nicht `¬´{n}¬ª ‚àà ‚Ñï`??\n"
"\n"
"**Robo**: Weil das hier alles komische Typen sind ‚Ä¶ Ich kann dir das sp√§ter mal in Ruhe erkl√§ren.\n"
"Jetzt will ich erst einmal die Frage entschl√ºsseln.\n"
"\n"
"**Robo**: Also, `¬´{h‚ÇÅ}¬ª`, `¬´{h‚ÇÇ}¬ª`, `¬´{h‚ÇÉ}¬ª` sind einfach nur Namen f√ºr verschiedene Annahmen, und zwar\n"
"f√ºr die Annahme `n < 10`, `1 < n` und `n ‚â† 5`. Beweisen sollen wir: `1 < n`.\n"
"\n"
"**Du**: Aber das war doch gerade eine der Annahmen.\n"
"\n"
"**Robo**: Ja, stimmt.\n"
"\n"
"**Du**: ???\n"
"\n"
"**Robo**: Du musst ihm das halt explizit sagen. Probiers mal mit `assumption`."
msgstr ""

#: Game.Levels.Proposition.L02_Assumption
msgid "**Untertan**: Ja richtig! Wenn Ihr nur w√ºsstet, was ich mir an dieser Frage schon den Kopf\n"
"zerbrochen habe!"
msgstr ""

#: Game.Levels.Proposition.L03_Assumption
msgid "Logische Aussagen"
msgstr ""

#: Game.Levels.Proposition.L03_Assumption
msgid "Ein dritter Untertan kommt mit folgendem Problem."
msgstr ""

#: Game.Levels.Proposition.L03_Assumption
msgid "**Robo**: Hier bedeutet `¬´{A}¬ª : Prop` wieder, dass `¬´{A}¬ª` irgendeine Aussage ist.\n"
"Und `¬´{hA}¬ª` ist eine Name f√ºr die Annahme, dass `¬´{A}¬ª` wahr ist.\n"
"\n"
"**Du**: Und unter dieser Annahme sollen wir jetzt `¬´{A}¬ª` beweisen?\n"
"\n"
"**Robo**: Ja. Da kommst du jetzt selbst drauf, wie das geht, oder?"
msgstr ""

#: Game.Levels.Proposition.L03_Assumption
msgid "**Robo**: Ist doch genau wie eben:\n"
"die Aussage, die zu beweisen ist, geh√∂rt selbst zu den Annahmen.\n"
"Also wird `assumption` auch wieder funktionieren."
msgstr ""

#: Game.Levels.Proposition.L03_Assumption
msgid "**Untertan**: Das ging ja schnell. Super! Vielen Dank."
msgstr ""

#: Game.Levels.Proposition.L04_True
msgid "True/False"
msgstr ""

#: Game.Levels.Proposition.L04_True
msgid "Der n√§chste Untertan in der Reihe ist ein Schelm."
msgstr ""

#: Game.Levels.Proposition.L04_True
msgid "**Robo**: Dieses `True` ist eine spezielle Aussage, n√§mlich die Aussage, die immer und\n"
"bedingungslos wahr ist.\n"
"\n"
"**Du**: Und was genau ist dann zu beweisen?\n"
"\n"
"**Robo**: Ich glaube, nichts. Ich glaube, du kannst einfach `trivial` schreiben."
msgstr ""

#: Game.Levels.Proposition.L04_True
msgid "**Schelm**: Wollte nur mal sehen, dass Ihr nicht auf den Kopf gefallen seid ‚Ä¶\n"
"\n"
"**Du** *(zu Robo)*: K√∂nnen wir nicht einfach immer dieses `trivial` verwenden?\n"
"Wie in einer Mathe-Vorlesung?\n"
"\n"
"**Robo**: Nein, das `trivial` hier hat eine ziemlich spezielle Bedeutung.\n"
"Das funktioniert nur in einer Handvoll Situationen."
msgstr ""

#: Game.Levels.Proposition.L05_Not
msgid "Not"
msgstr ""

#: Game.Levels.Proposition.L05_Not
msgid "Der Schelm hat noch eine Schwester dabei."
msgstr ""

#: Game.Levels.Proposition.L05_Not
msgid "**Robo**: Dieses Zeichen `¬¨` bedeutet Negation. Also wenn eine Aussage `(A : Prop)`\n"
"wahr ist, dann ist `¬¨A` falsch, und umgekehrt.\n"
"\n"
"**Du**: Und `False` ist wahrscheinlich die Aussage, die immer falsch ist?\n"
"\n"
"**Robo**: Ja, richtig.\n"
"\n"
"**Du**: Ist das jetzt nicht doch wieder trivial?\n"
"\n"
"**Robo**: Probier mal!"
msgstr ""

#: Game.Levels.Proposition.L05_Not
msgid "Die Schwester lacht und eilt ihrem Bruder hinterher."
msgstr ""

#: Game.Levels.Proposition.L06_False
msgid "Aus Falschem folgt vieles."
msgstr ""

#: Game.Levels.Proposition.L06_False
msgid "Als n√§chstes kommen drei Querulanten. Der erste hat folgendes Problem:"
msgstr ""

#: Game.Levels.Proposition.L06_False
msgid "**Du** Wenn ich das jetzt richtig lese, ist `¬´{A}¬ª` eine Aussage,\n"
"und wir haben au√üerdem eine Annahme names `¬´{h}¬ª`, die besagt ‚Ä¶\n"
"\n"
"**Robo**: ‚Ä¶ die besagt, dass `False` gilt.\n"
"\n"
"**Du**: Ich dachte, `False` gilt nie?\n"
"\n"
"**Robo**: Ja, genau. Die Annahme ist `False`, also falsch.\n"
"Und aus einer falschen Annahme kann man bekanntlich alles beweisen!\n"
"Insbesondere die gesuchte Aussage `¬´{A}¬ª`.\n"
"\n"
"**Du**: Und wie erkl√§re ich das jetzt diesem Formalosophen?\n"
"\n"
"**Robo**: Ich glaube, du musst ihn darauf hinweisen, dass zwischen der allgemeing√ºltigen\n"
"Annahme `True` und seiner Annahme `False` ein Widerspruch besteht. Probier mal `contradiction`."
msgstr ""

#: Game.Levels.Proposition.L06_False
msgid "Der erste Querulant ist offenbar zufrieden.\n"
"\n"
"**Du**: War das jetzt ein Widerspruchsbeweis?\n"
"\n"
"**Robo**: Nein, nein, ein Widerspruchsbeweis sieht anders aus. Das Argument hier war:\n"
" wir haben eine `contradiction` in unserem Annahmen, also folgt jede beliebige Aussage."
msgstr ""

#: Game.Levels.Proposition.L07_ContraNotEq
msgid "Aus Falschem folgt vieles."
msgstr ""

#: Game.Levels.Proposition.L07_ContraNotEq
msgid "Auftritt zweiter Querulant."
msgstr ""

#: Game.Levels.Proposition.L07_ContraNotEq
msgid ""
msgstr ""

#: Game.Levels.Proposition.L07_ContraNotEq
msgid "**Du** Ist `¬´{n}¬ª ‚â† ¬´{n}¬ª` nicht auch ein Widerspruch?\n"
"\n"
"**Robo**: Probiers mal!"
msgstr ""

#: Game.Levels.Proposition.L07_ContraNotEq
msgid "**Du**: Ja, scheint funktioniert zu haben.\n"
"\n"
"**Du**: Aber irgendwie kommt mir das immer noch ein wenig suspekt vor.\n"
"Jetzt habe ich bewiesen, dass eine beliebige nat√ºrliche Zahl gleich 37 ist?\n"
"\n"
"**Robo**: Nein, nicht doch. Nur eine beliebige Zahl, die ungleich sich selbst ist, ist gleich 37.\n"
"Und gleich 38, und gleich 39, ‚Ä¶\n"
"\n"
"**Du**: Okay, okay, verstehe."
msgstr ""

#: Game.Levels.Proposition.L08_Contra
msgid "Aus Falschem folgt vieles."
msgstr ""

#: Game.Levels.Proposition.L08_Contra
msgid "Auftritt dritter Querulant."
msgstr ""

#: Game.Levels.Proposition.L08_Contra
msgid ""
msgstr ""

#: Game.Levels.Proposition.L08_Contra
msgid "**Du** Wieder ein Widerspruch in den Annahmen?\n"
"\n"
"**Robo**: Ich sehe, du hast langsam den Dreh raus."
msgstr ""

#: Game.Levels.Proposition.L08_Contra
msgid "**Robo**: Gut gemacht. Bei dieser Frage ist auch ein bisschen offensichtlicher,\n"
"worin der Widerspruch besteht: Die Annahme `n ‚â† 10` ist genau die Negation von `n = 10`.\n"
"Man muss `‚â†` immer als `¬¨(¬∑ = ¬∑)` lesen."
msgstr ""

#: Game.Levels.Proposition.L09_And
msgid "Und"
msgstr ""

#: Game.Levels.Proposition.L09_And
msgid "Der n√§chste Formalosoph in der Reihe hat seine Frage bereits mitgebracht.\n"
"Er legt sie uns vor, setzt sich hin und h√§kelt."
msgstr ""

#: Game.Levels.Proposition.L09_And
msgid ""
msgstr ""

#: Game.Levels.Proposition.L09_And
msgid "**Du**: Also, wir haben zwei Annahmen: `¬´{A}¬ª` gilt, und `¬´{B}¬ª` gilt auch. Und beweisen sollen wir\n"
"dass `¬´{A}¬ª und ¬´{B}¬ª` gilt. Ich glaube, diese Formalospinner treiben mich noch zur Verzweiflung.\n"
"Kann ich nicht wieder `trivial` sagen?\n"
"\n"
"**Robo**: Nee, diesmal wird das nicht funktionieren.\n"
"Du musst das Beweisziel einfach in zwei Teile zerlegen. Probier mal `constructor`.\n"
"\n"
"**Du**: Du meinst, `destructor`??\n"
"\n"
"**Robo**: Nein, `constructor`. Ich wei√ü, das ist verwirrend,\n"
"aber die nennen das hier so weil man die Aussage aus mehreren Teilen\n"
"konstruieren kann."
msgstr ""

#: Game.Levels.Proposition.L09_And
msgid "**Robo**: Schau mal, das ist Zauberpapier.\n"
"Jetzt haben wir auf einmal zwei Beweisziele.\n"
"Hier ist dast Ziel `¬´{B}¬ª`.\n"
"Ich glaube, du wei√üt schon, wie man die jeweils erreicht.\n"
"Die Ziele stehen ja jeweils in den *Annahmen*."
msgstr ""

#: Game.Levels.Proposition.L09_And
msgid "**Robo**: Super!\n"
"\n"
"Ihm scheinen diese Fragen inzwischen Spa√ü zu machen.\n"
"\n"
"**Robo**: Meinst du, dieser Hebel, an dem \"Editor mode\" steht, ist echt?\n"
"Oder ist der nur gemalt? Probier mal!"
msgstr ""

#: Game.Levels.Proposition.L10_And
msgid "Und"
msgstr ""

#: Game.Levels.Proposition.L10_And
msgid "Langsam wird die Schlange k√ºrzer. Die n√§chste Formalosophin, ebenfalls h√§kelnd, hat folgendes Anliegen."
msgstr ""

#: Game.Levels.Proposition.L10_And
msgid "**Du**: Jetzt m√ºssen wir wohl die Annahme de-konstruieren.\n"
"\n"
"**Robo**: Ja, genau. Das geht am einfachsten mit `rcases ¬´{h}¬ª with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©`.\n"
"\n"
"**Du**: Moment, wie schreib ich *das* denn hier auf?\n"
"\n"
"**Robo**: Die bleiden Klammern schreibst du als `\\<` und `\\>`, oder gleichzeitig als `\\<>`.\n"
"Und h‚ÇÅ schreibst du einfach als `h\\1`. Aber du kannst dir auch einfach andere Namen\n"
"f√ºr `h‚ÇÅ` und `h‚ÇÇ`, zum Beispiel `rcases ¬´{h}¬ª with ‚ü®hA, hBC‚ü©`"
msgstr ""

#: Game.Levels.Proposition.L10_And
msgid "**Robo**: Das sieht doch schon besser aus! Gleich nochmal!"
msgstr ""

#: Game.Levels.Proposition.L10_And
msgid "**Robo**: Du hast einen Beweis daf√ºr in den *Annahmen*."
msgstr ""

#: Game.Levels.Proposition.L10_And
msgid "**Robo**: Du h√§ttest das √ºbrigens auch direkt verschachtelt schreiben k√∂nnen:\n"
"`rcases h with ‚ü®h‚ÇÅ, ‚ü®h‚ÇÇ , h‚ÇÉ‚ü©‚ü©`."
msgstr ""

#: Game.Levels.Proposition.L11_Or
msgid "Oder"
msgstr ""

#: Game.Levels.Proposition.L11_Or
msgid "Der n√§chste bitte ‚Ä¶"
msgstr ""

#: Game.Levels.Proposition.L11_Or
msgid "**Du** Muss ich jetzt wieder das Beweisziel de-konstruieren?\n"
"\n"
"**Robo** Nein, viel einfacher. Wenn du eine Oder-Aussage beweisen sollst, musst du dich\n"
"einfach entscheiden, ob du die linke oder rechte Seite beweisen willst.\n"
"\n"
"**Du** Und wie erkl√§re ich meinem Formalosophen, welche Seite ich gern beweisen w√ºrde?\n"
"Ich will nat√ºrlich `¬´{A}¬ª` beweisen!\n"
"\n"
"**Robo** Mit `left` bzw. `right`. Ist doch logisch, oder?"
msgstr ""

#: Game.Levels.Proposition.L11_Or
msgid "**Robo** Wusste gar nicht, dass du eine Links-Rechts-Schw√§che hast. Probier's nochmal."
msgstr ""

#: Game.Levels.Proposition.L11_Or
msgid "Auch dieser Formalosoph zieht zufrieden von dannen."
msgstr ""

#: Game.Levels.Proposition.L12_Or
msgid "Oder"
msgstr ""

#: Game.Levels.Proposition.L12_Or
msgid "Der n√§chste bitte ‚Ä¶"
msgstr ""

#: Game.Levels.Proposition.L12_Or
msgid ""
msgstr ""

#: Game.Levels.Proposition.L12_Or
msgid "**Robo** Schau mal, wenn du mit dem Finger eine Annahme ber√ºhrst, zeigt es dir,\n"
"wie die Klammern gesetzt sind. Irre‚Ä¶\n"
"\n"
"**Du** Ah ich sehe, also `(¬´{A}¬ª ‚àß ¬´{B}¬ª) ‚à® ¬´{A}¬ª`!\n"
"\n"
"**Du** Ich glaube den ganzen Zircus hier langsam nicht mehr:\n"
"Zuerst ein \"Und\" im Ziel, dann \"Und\" in der Annahme, dann \"Oder\" im Ziel und jetzt\n"
"\"Oder\" in der Annahme, die haben sich doch abgesprochen!\n"
"\n"
"**Robo** Lass ihnen doch ihren Spa√ü.\n"
"Wir sind ja gleich hier fertig, und k√∂nnen zu einem interessanteren Planeten weiterfliegen.\n"
"\n"
"**Du** Also, wieder `rcases ‚Ä¶`?\n"
"\n"
"**Robo** Ja, aber diesmal nicht `rcases ¬´{h}¬ª with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©`, sondern `rcases ¬´{h}¬ª with h | h`."
msgstr ""

#: Game.Levels.Proposition.L12_Or
msgid "**Robo**\n"
"Jetzt musst du dein Ziel zweimal beweisen:\n"
"Einmal unter Annahme der linken Seite `¬´{A}¬ª ‚àß ¬´{B}¬ª`,\n"
"und einmal unter Annahme der rechten Seite `¬´{A}¬ª`.\n"
"Hier haben nehmen wir an, die linke Seite\n"
"sei wahr."
msgstr ""

#: Game.Levels.Proposition.L12_Or
msgid "**Robo** Wie man mit einem Und in den Annahmen umgeht,\n"
"wei√üt du doch schon:\n"
"`rcases h with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©`. Zur Erinnerung: F√ºr die Klammern schreibst du `\\<>`."
msgstr ""

#: Game.Levels.Proposition.L12_Or
msgid "**Robo** Jetzt musst du dein Ziel noch unter der rechten Annahme\n"
"von `(¬´{A}¬ª ‚àß ¬´{B}¬ª) ‚à® ¬´{A}¬ª` zeigen, also angenommen, `¬´{A}¬ª` sei wahr."
msgstr ""

#: Game.Levels.Proposition.L12_Or
msgid "**Du** Okay, das scheint ihn zufriedenzustellen. Nur noch eine Seele‚Ä¶\n"
"Kannst du mir vorher noch einmal kurz alles Leansch zusammenfassen,\n"
"das du mir bis hierher beigebracht hast?\n"
"\n"
"Robo strahlt √ºbergl√ºcklich. Noch *nie* warst du so auf ihn angewiesen.\n"
"\n"
"**Robo** Na klar, schau her!\n"
"\n"
"## Notationen / Begriffe\n"
"\n"
"|               | Beschreibung                                                             |\n"
"|:--------------|:-------------------------------------------------------------------------|\n"
"| *Goal*        | Was aktuell zu beweisen ist.                                             |\n"
"| *Annahme*     | Objekte & Resultate, die man zur Verf√ºgung hat.                          |\n"
"| *Taktik*      | Befehl im Beweis. Entspricht einem Beweisschritt.                        |\n"
"| `‚Ñï`           | Typ aller nat√ºrlichen Zahlen.                                            |\n"
"| `0, 1, 2, ‚Ä¶`  | Explizite nat√ºrliche Zahlen.                                             |\n"
"| `=`           | Gleichheit.                                                              |\n"
"| `‚â†`           | Ungleichheit. Abk√ºrzung f√ºr `¬¨(¬∑=¬∑)`.                                    |\n"
"| `Prop`        | Typ aller logischen Aussagen.                                            |\n"
"| `True`        | Die logische Aussage `(True : Prop)` ist bedingungslos wahr.             |\n"
"| `False`       | Die logische Aussage `(False : Prop)` ist bedingungslos falsch.          |\n"
"| `¬¨`           | Logische Negierung.                                                      |\n"
"| `‚àß`           | Logisch UND.                                                             |\n"
"| `‚à®`           | Logisch ODER.                                                            |\n"
"| `(n : ‚Ñï)`     | Eine nat√ºrliche Zahl.                                                    |\n"
"| `(A : Prop)`  | Eine logische Aussage.                                                   |\n"
"| `(ha : A)`    | Ein Beweis, dass die logische Aussage `(A : Prop)` wahr ist.             |\n"
"| `(h : A ‚àß B)` | Eine Annahme, die den Namen `h` bekommen hat.                            |\n"
"| `‚ü®¬∑,¬∑‚ü©`       | Schreibweise f√ºr Struktur mit mehreren Feldern (kommt sp√§ter im Detail). |\n"
"| `h.1, h.2, ‚Ä¶` | Die einzelnen Felder der Stuktur. Auch `h.[Name des Feldes]`             |\n"
"\n"
"\n"
"## Taktiken\n"
"\n"
"Die Worte, die du aktiv gebrauchen musst, hei√üen zusammengefasst `Taktiken`. Hier sind alle Taktiken, die wir auf diesem Planeten gebraucht haben:\n"
"\n"
"|    | Taktik                    | Beispiel                                          |\n"
"|:---|:--------------------------|:--------------------------------------------------|\n"
"| 1  | `rfl`                     | Beweist `A = A`.                                  |\n"
"| 2  | `assumption`              | Sucht das Goal in den Annahmen.                   |\n"
"| 3  | `contradiction`           | Sucht einen Widerspruch.                          |\n"
"| 4  | `trivial`                 | Kombiniert die obigen drei Taktiken (und mehr).   |\n"
"| 5  | `constructor`             | Teilt ein UND im Goal auf.                        |\n"
"| 6  | `left`/`right`            | Beweist eine Seite eines ODER im Goal.            |\n"
"| 7·µÉ | `rcases h with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©`  | Teilt ein UND in den Annahmen auf.                |\n"
"| 7·µá | `rcases h with h \\| h`   | Teilt ein ODER in den Annahmen in zwei F√§lle auf. |\n"
"\n"
"**Du** Woher wei√üt du das eigentlich alles?\n"
"\n"
"**Robo** Keine Ahnung. War, glaube ich, vorinstalliert."
msgstr ""

#: Game.Levels.Proposition.L13_Summary
msgid "Zusammenfassung"
msgstr ""

#: Game.Levels.Proposition.L13_Summary
msgid "Der letzte Untertan tritt vor. Ihr Anliegen ist etwas komplizierter als die vorherigen.\n"
"\n"
"**Robo** Wirf einfach alles drauf, was du gelernt hast.\n"
"Hier, ich bin sogar so nett und zeig dir noch einmal die vier\n"
"wichtigsten Taktiken f√ºr diese Situation an.\n"
"\n"
"| (√úbersicht) | Und (`‚àß`)                | Oder (`‚à®`)              |\n"
"|-------------|:-------------------------|:------------------------|\n"
"| Annahme     | `rcases h with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©` | `rcases h with h \\| h` |\n"
"| Goal        | `constructor`            | `left`/`right`          |"
msgstr ""

#: Game.Levels.Proposition.L13_Summary
msgid "**Robo**: Ich w√ºrd zuerst die Annahme ¬´{h}¬ª mit `rcases ¬´{h}¬ª` aufteilen."
msgstr ""

#: Game.Levels.Proposition.L13_Summary
msgid "**Robo**: Jetzt kannst du das `‚àß` im Goal mit `constructor` angehen."
msgstr ""

#: Game.Levels.Proposition.L13_Summary
msgid "**Robo**: Hier w√ºrde ich die Annahme ¬´{h}¬ª nochmals mit `rcases` aufteilen."
msgstr ""

#: Game.Levels.Proposition.L13_Summary
msgid "**Robo**: Der Nachteil an der Reihenfolge ist, dass du jetzt in jedem Untergoal\n"
"`rcases h` aufrufen musst."
msgstr ""

#: Game.Levels.Proposition.L13_Summary
msgid "**Robo** Bravo! Jetzt aber nichts wie weg hier, bevor sich eine neue Schlange bildet!\n"
"\n"
"K√∂nigin *Logisinde* ist in der Zwischenzeit eingeschlafen, und ihr stehlt euch heimlich davon."
msgstr ""

#: Game.Levels.Proposition
msgid "Logo"
msgstr ""

#: Game.Levels.Proposition
msgid "Durch eine unvorhergesehene und nicht-kanonische Singularit√§t in der Raumzeit\n"
"bist du aus Versehen in ein Paralleluniversum gestolpert. Wie es aussieht, gibt es kein zur√ºck.\n"
"Richte dich besser darauf ein, hier bleiben und dich zurechtzufinden zu m√ºssen.\n"
"\n"
"Wie es aussieht, gibt es hier viele nette kleine Planeten. Alle bewohnbar, und bis zu\n"
"sieben Sonnenunterg√§nge t√§glich inklusive. Nur werden sie allesamt von Formalosophen bewohnt,\n"
"seltsamen Wesen mit ausgefallenen mathematischen Obsessionen. Und dummerweise hat sich\n"
"herumgesprochen, dass du in deinem fr√ºheren Universum Mathematiker warst. du wirst hier\n"
"keine Ruhe finden, solange du nicht lernst, ihren unabl√§ssigen Wissensdurst zu stillen.\n"
"\n"
"Es gibt nur zwei Schwierigkeiten: Erstens haben die Formalosophen allem Anschein nach\n"
"√ºberhaupt kein tieferes mathematisches Verst√§ndnis, und zweitens kommunizieren Sie √ºber Mathematik\n"
"exklusiv in einem dir fremden Dialekt, den sie Leansch [liÀên É] nennen.\n"
"\n"
"Zum Gl√ºck hat Robo mit dir das Universum gewechselt.\n"
"Robo, das ist dein kleiner SmartElf. Robo ist zwar auch nicht die mathematische Leuchte, die du Dir\n"
"in dieser Situation gew√ºnscht h√§ttest, aber es scheint, er hat irgendwo Leansch gelernt.\n"
"Und das ist Gold wert."
msgstr ""

#: Game.Levels.Sum.L01_Simp
msgid "Simp"
msgstr ""

#: Game.Levels.Sum.L01_Simp
msgid "**Babylonier**: Jeder Turm hat eine Inschrift. Da k√∂nnt ihr noch einmal genau nachlesen,\n"
"warum er steht. Hier zum Beispiel."
msgstr ""

#: Game.Levels.Sum.L01_Simp
msgid "**Du**: Oh das ist ganz sch√∂n viel neues ‚Ä¶ mal sehen ‚Ä¶\n"
"\n"
"Das sieht aus wie $( \\sum_i 0 + 0 ) = 0$.\n"
"\n"
"**Robo**: Genau! Man schreibt `\\sum`. Und `i : Fin n` bedeutet,\n"
"dass summiert wird √ºber $0$, $1$, ‚Ä¶, $n-1$.\n"
"\n"
"**Du**: Okay. Und was mach ich jetzt?\n"
"\n"
"**Robo**: `simp` ist eine starke Taktik, die viele Terme vereinfacht.\n"
"Wir fangen besser an, sie zu benutzen."
msgstr ""

#: Game.Levels.Sum.L01_Simp
msgid "**Babylonier**: Seht ihr, das passt!\n"
"\n"
"**Robo**: Mir f√§llt gerade ein, du hattest ja mal gefragt bez√ºglich `rw` unter Quantoren.\n"
"Mit Summen ist das das gleiche: Hier musst du immer `simp_rw` verwenden, wenn du innerhalb\n"
"einer Summe was umschreiben m√∂chtest."
msgstr ""

#: Game.Levels.Sum.L02_Sum
msgid "endliche Summe"
msgstr ""

#: Game.Levels.Sum.L02_Sum
msgid "Ihr schaut euch den n√§chsten Turm an."
msgstr ""

#: Game.Levels.Sum.L02_Sum
msgid "$\\sum_{i=0}^{n-1} (i + 1) = n + \\sum_{i=0}^{n-1} i$."
msgstr ""

#: Game.Levels.Sum.L02_Sum
msgid "**Du**: Hmm, wieder `simp`?\n"
"\n"
"**Robo**: Nicht ganz. `simp` benutzt nur Lemmata, die klar eine Vereinfachung darstellen.\n"
"Im Lean-Duden sind diese Lemmata mit `@[simp]` markiert.\n"
"Hier brauchen wir aber folgende Identit√§t:\n"
"\n"
"$$\n"
"\\sum_{i = 0}^n a_i + b_i = \\sum_{i = 0}^n a_i + \\sum_{j = 0}^n b_j\n"
"$$\n"
"\n"
"**Robo**: Und da bei dieser Identit√§t unklar ist, welche Seite ‚Äûeinfacher‚Äú ist, wird so ein Lemma nicht mit\n"
"`@[simp]` markiert.\n"
"\n"
"**Du**: Hat diese Gleichheit denn wenigstens einen Namen.\n"
"\n"
"**Robo**: Sie hei√üt `sum_add_distrib`."
msgstr ""

#: Game.Levels.Sum.L02_Sum
msgid "**Robo**: Die zweite Summe `‚àë x : Fin n, 1` kann jetzt aber mit\n"
"`simp` zu `n` vereinfacht werden."
msgstr ""

#: Game.Levels.Sum.L02_Sum
msgid "**Robo**: Bis auf Umordnung sind jetzt beide Seiten gleich!\n"
"\n"
"**Du**: Dann greift jetzt wohl `ring`!\n"
"\n"
"**Robo**: Genau! Und alternativ k√∂nntest du mit `rw [add_comm]` die Arbeit von `ring`\n"
"auch manuell machen."
msgstr ""

#: Game.Levels.Sum.L02_Sum
msgid ""
msgstr ""

#: Game.Levels.Sum.L02_Sum
msgid "Der Babylonier macht ein sehr zufriedenes Gesicht."
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "Arithmetische Summe"
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "**Babylonier**: Kommt, ich zeig Euch mal einen unserer sch√∂nsten T√ºrme!\n"
"\n"
"Nach einem kurzen Spaziergang steht ihr davon.\n"
"\n"
"**Robo**: Das muss der bekannte *Gau√üsche Turm von Babylon* sein!\n"
"√úber den hab ich schon einmal Daten verarbeitet.\n"
"\n"
"**Babylonier**: Richtig. Gau√ü war ein Babylonier!"
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "$2 \\cdot \\sum_{i = 0}^n i = n \\cdot (n + 1)$."
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "**Du**: Klar, die werden ja nicht oben anfangen mit bauen. Sag mal,\n"
"wie zeige ich denn die arithmetische Summe, die hier gekritzelt steht?\n"
"Ich w√ºrde gerne Induktion √ºber $n$ anwenden.\n"
"\n"
"**Robo**: Wenn du meinst ‚Ä¶ Auf Leansch w√§re das: `induction n with d hd`!\n"
"Der Zusatz `with d hd` ist nat√ºrlich optional.\n"
"Du kannst damit Namen f√ºr Induktionsvariable (d) und -hypothese (h) vorgeben."
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "**Du**: Zuerst der Induktionsanfang ‚Ä¶\n"
"\n"
"**Robo**: Diesen kannst du oft mit `simp` abk√ºrzen!"
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "**Robo**: Jetzt der Induktionsschritt.\n"
"Bei Induktion √ºber endlichen Summen beginnst du den Induktionsschritt\n"
"immer mit `rw [sum_univ_castSucc]`."
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "**Du**: Oh das sieht jetz aber kompliziert aus‚Ä¶\n"
"\n"
"**Robo**: Da musst du etwas dr√ºber hinweg lesen. Am besten machst du kurz `simp`,\n"
"dann sieht's schon wieder besser aus."
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "**Du**: Was bedeutet eigentlich der kleine Pfeil `‚Üë`?\n"
"\n"
"**Robo**: Das ist eine *Coersion*. Sowas wie wenn man eine nat√ºrliche Zahl als ganze Zahl betrachtet,\n"
"also die nat√ºrliche Abbildung `‚Ñï ‚Ü™ ‚Ñ§` benutzt. Oder hier, wenn ein Element `x : Fin n` als\n"
"Element `(‚Üëx : ‚Ñï)` betrachtet wird."
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "**Robo**: Um die Induktionshypothese anzuwenden, brauchst du zuerst das Lemma `mul_add`."
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "**Du**: Und wie wende ich jetzt die Induktionshypothese an?\n"
"\n"
"**Robo** mit `rw` wie jede andere Annahme auch."
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "**Du**: Der Rest ist einfach Rechnerei.\n"
"\n"
"**Robo**: Dann wird `ring` wohl keine Probleme haben."
msgstr ""

#: Game.Levels.Sum.L03_ArithSum
msgid "Du schaust dich um und bewunderst das Tal in dem hunderte, wenn nicht tausende,\n"
"Steint√ºrme in allen Formen und H√∂hen stehen."
msgstr ""

#: Game.Levels.Sum.L04_SumOdd
msgid "Summe aller ungeraden Zahlen"
msgstr ""

#: Game.Levels.Sum.L04_SumOdd
msgid "Aus reiner Neugierde gehst Du zu einem etwas kleineren Nachbarsturm hin√ºber."
msgstr ""

#: Game.Levels.Sum.L04_SumOdd
msgid "$\\sum_{i = 0}^{n-1} (2i + 1) = n ^ 2$."
msgstr ""

#: Game.Levels.Sum.L04_SumOdd
msgid "**Robo**: Das funktioniert genau gleich wie zuvor, viel Gl√ºck."
msgstr ""

#: Game.Levels.Sum.L04_SumOdd
msgid "Den Induktionschritt bei Summen solltest du wie gesagt\n"
"immer mit `rw [sum_univ_castSucc]` beginnen."
msgstr ""

#: Game.Levels.Sum.L05_SumComm
msgid "Summe vertauschen"
msgstr ""

#: Game.Levels.Sum.L05_SumComm
msgid "**Babylonier**: Schaut mal, da vorn stehen zwei Freunde von mir. Ich muss euch unbedingt vorstellen!\n"
"\n"
"Die beiden Freunde stehen vor zwei T√ºrmen mit einer kleinen Br√ºcke, die zwischen den ihnen verl√§uft.\n"
"Aber die Tafel am Eingang ist so sehr verwittert, dass sie nicht mehr lesbar ist.\n"
"Auf der oberen H√§lfte steht nur folgendes, *in einer Form, die Du verstehst*:\n"
"\n"
"$$\\sum_{i=0}^n\\sum_{j=0}^m a_{ij} = \\sum_{j=0}^m\\sum_{i=0}^n a_{ij}$$\n"
"\n"
"Nat√ºrlich fangt ihr an zu r√§tseln, was darunter stand.\n"
"\n"
"**Robo**: Probier mal, das im lokalen Dialekt zu formulieren."
msgstr ""

#: Game.Levels.Sum.L05_SumComm
msgid "**Robo**: Das sieht gut aus, aber du solltest das kurz beweisen, um sicher zu sein.\n"
"\n"
"**Du**: Hast du nicht ein Lemma daf√ºr?\n"
"\n"
"**Robo**: Doch, probier mal `sum_comm`."
msgstr ""

#: Game.Levels.Sum.L05_SumComm
msgid "Die drei Babylonier sind begeistert, als ihr ihnen das St√ºck Papier √ºberreicht,\n"
"  auf das du die Aussage gekritzelt hast. Gleich z√ºckt einer einen Mei√üel und sie beginnen, eine\n"
"  neue Platte zu erstellen.\n"
"\n"
"  Ihr beschlie√üt, euch noch ein bisschen allein umzusehen."
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "Zusammenfassung"
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Du**: Robo, gib mir doch nochmals eine √úbersicht, bitte.\n"
"\n"
"**Robo**: Aber klar:\n"
"\n"
"|                      | Beschreibung                              |\n"
"|:---------------------|:------------------------------------------|\n"
"| `Fin n`              | Ist ein Typ mit Zahlen $0, \\ldots, n-1$. |\n"
"| `‚àë (i : Fin n), a i` | $\\sum_{i=0}^{n-1} a_i$                   |\n"
"| `‚Üëi`                 | Eine Coersion, z.B. `Fin n ‚Üí ‚Ñï`.          |\n"
"\n"
"und\n"
"\n"
"|    | Taktik                    | Beispiel                             |\n"
"|:---|:--------------------------|:-------------------------------------|\n"
"| 21 | `simp`                    | Simplifikation.                      |\n"
"| 22 | `induction n`             | Induktion √ºber $n$                   |\n"
"\n"
"Da kommt hinter einem Turm pl√∂tzlich ein besonders gro√üer Babylonier hervor, schaut euch\n"
"bedrohlich an und fragt in tiefer Stimme:"
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Du**: Gulp. Naja das wird schon klappen. Also man f√§ngt wieder mit Induktion an ‚Ä¶"
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Du**: Also den Induktionsanfang kann man einfach zeigen ‚Ä¶"
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Robo**: Und jetzt wieder `rw [sum_univ_castSucc]` und `simp`, um vorw√§rts zu\n"
"kommen!"
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Robo**: Siehst du die Induktionshypothese hier drin?"
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Du**: Okay, damit habe ich die linke Seite der Gleichung ziemlich gut bearbeitet.\n"
"Aber, ehm, mit der Rechten komme ich nicht weiter ‚Ä¶\n"
"\n"
"Der Babylonier schaut dich finster an.\n"
"\n"
"**Du**: Ich will `sum_univ_castSucc` auf der rechten Seite anwenden, aber es gibt mehrere Orte, wo das Lemma passen w√ºrde, und ich will es nur an einer bestimmten Stelle anwenden.\n"
"\n"
"**Robo**:\n"
"Mit `rw [sum_univ_castSucc (n := ¬´{n}¬ª + 1)]` kannst du angeben, wo genau.\n"
"\n"
"**Du**: Was bedeutet das?\n"
"\n"
"**Robo** Das Lemma hat eine Annahme `n` und du sagst ihm explizit, was es f√ºr dieses `n`\n"
"einsetzen muss, n√§mlich `¬´{n}¬ª + 1`"
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Robo**: Das hat jetzt einfach `Fin.sum_univ_castSucc` am ersten Ort angewendet,\n"
"wo das m√∂glich war. Das ist nicht so ideal, die linke Seite war schon okay.\n"
"\n"
"**Robo**: Geh doch zur√ºck und bring `rw` dazu am anderen Ort umzuschreiben."
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Robo**: `add_pow_two` ist auch noch n√ºtzlich!"
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Du**: Ich glaube, ich sehe hier eine Gau√üsche Summe!!\n"
"\n"
"**Robo**: Ich habe dir das vorhin tempor√§r als `arithmetic_sum` gespeichert.\n"
"Das kannst du jetzt benutzen."
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "**Du**: Jetzt sollten es eigentlich nur noch arithmetische Operationen sein."
msgstr ""

#: Game.Levels.Sum.L06_Summary
msgid "Der Babylonier denkt ganz lange nach, und ihr bekommt das Gef√ºhl, dass er gar nie\n"
"aggressiv war, sondern nur eine sehr tiefe Stimme hat.\n"
"\n"
"Mit einem kleinen Erdbeben setzt er sich hin und winkt euch dankend zu."
msgstr ""

#: Game.Levels.Sum
msgid "Babylon"
msgstr ""

#: Game.Levels.Sum
msgid "Ihr erreicht einen Planet, auf dem unz√§hlige Steinplatten zu bizzar hohen T√ºrme\n"
"gestapelt sind. Die ganze Landschaft wirkt wie ein grosses Puzzle, in dem jede Platte\n"
"feins√§uberlich auf den darunterliegenden Platten aufbaut. Einige T√ºrme sind so hoch, dass man ihre Spitze gar nicht erkennen kann. Bald trefft ihr auch den ersten Bewohner dieses Planeten an.\n"
"\n"
"**Babylonier**: Willkommen auf *Babylon*!\n"
"\n"
"**Du**: Oh ‚Ä¶\n"
"\n"
"Dich beschleicht ein ungutes Gef√ºhl.\n"
"\n"
"**Du**: Seid ihr euch sicher, dass diese T√ºrme stabil sind?\n"
"\n"
"**Babylonier**: 100 Pro!\n"
"\n"
"**Du**: Wie baut ihr denn diese Meisterwerke?\n"
"\n"
"**Babylonier**: Ganz einfach! Ein Stein nach dem anderen."
msgstr ""

#: Game.Levels.SetTheory.L01_Univ
msgid "Mengen"
msgstr ""

#: Game.Levels.SetTheory.L01_Univ
msgid "**Mengea**: Ich w√ºrde leider den Inhalt jenes Buches eh nicht verstehen. Aber der beste Weg f√ºr\n"
"euch, dieses zu entschl√ºsseln ist, euch ausgiebig mit der Bev√∂lkerung hier zu unterhalten.\n"
"Lebt mit ihnen, redet mit ihnen und ihr werdet die Sprache automatisch lernen.\n"
"\n"
"**Mengea**: Seid aber vorgewarnt, die Leute hier denken ganz viel √ºber Mengen nach,\n"
"womit sie immer *homogene Mengen* meinen. Eine Menge nat√ºrlicher Zahlen `{1, 4, 6}` ist\n"
"verst√§ndlich, aber sowas wie eine Menge `{(2 : ‚Ñï), {3, 1}, \"e\", (1 : ‚ÑÇ)}` gibt es hier\n"
"einfach nicht. Punkt.\n"
"\n"
"**Robo**: Als Kontext: Wenn `A` ein beliebiger `Type` ist, dann ist `(U : Set A)` eine Menge\n"
"mit Elementen aus `A`\n"
"\n"
"**Mengea**: Damit ich wei√ü, dass ihr euch grunds√§tzlich mit den Leuten austauschen k√∂nnt,\n"
"erkl√§rt mir doch folgendes:"
msgstr ""

#: Game.Levels.SetTheory.L01_Univ
msgid "**Du**: Also `A` ist ein `Type`, `x` ist ein Element in `A`‚Ä¶\n"
"\n"
"**Robo** ‚Ä¶ und `univ` ist die Menge aller Elemente in `A`.\n"
"\n"
"**Du** ist das nicht einfach `A` selber?\n"
"\n"
"**Robo** Fast, aber das eine ist ein `Type`, das andere eine Menge, also vom Typ `Set A`.\n"
"\n"
"**Du**: Unlogisch?\n"
"\n"
"**Mengites**: Naja, Typen und Mengen sind halt zwei unterschiedliche Sachen und wenn ihr\n"
"√ºber Mengen sprechen wollt, m√ºssen alles Mengen sein.\n"
"\n"
"**Du**: Na gut. Und wieso `x ‚àà univ` und nicht `x : univ` wie bei Typen?\n"
"\n"
"**Robo**: Jedes Element `(x : A)` hat entweder die Eigenschaft `x ‚àà U` (`\\in`) oder `x ‚àâ U`\n"
"(`\\nin`) f√ºr eine Menge `(U : Set A)`.\n"
"\n"
"**Du**: Also das ist ja dann `trivial`. Hoffentlich sehen die das hier auch so‚Ä¶"
msgstr ""

#: Game.Levels.SetTheory.L01_Univ
msgid "Die Menge `(univ : Set A)` ist die Menge aller Elemente in `A`. Obwohl mathematisch `A` und\n"
"`(univ : Set A)` so erscheinen, als seien sie das gleiche, ist das in Leans Typentheorie nicht so.\n"
"Elemente haben immer Typ `x : A`, aber sie k√∂nnen Elemente von verschiedenen \"Teilmengen\" von `A`\n"
"-- `U : Set A` -- sein. Z.B. gilt immer `x ‚àà univ` und nie `x ‚àà ‚àÖ`."
msgstr ""

#: Game.Levels.SetTheory.L01_Univ
msgid "TODO. Siehe `univ`.\n"
"\n"
"`x ‚àâ A` ist eine Notation f√ºr `¬¨ (x ‚àà A)`.\n"
"\n"
"(`\\in`, `\\nin`)"
msgstr ""

#: Game.Levels.SetTheory.L01_Univ
msgid "**Mengea**: Ja das stimmt schon. Dann w√ºnsche ich euch viel Erfolg auf eurer Reise!"
msgstr ""

#: Game.Levels.SetTheory.L02_Empty
msgid "leere Menge"
msgstr ""

#: Game.Levels.SetTheory.L02_Empty
msgid "Ihr zieht also durch die Gegend und redet mit den Leuten. Ein Junge rennt zu euch und fragt:"
msgstr ""

#: Game.Levels.SetTheory.L02_Empty
msgid "**Du**: Kein Element ist in der leeren Menge enthalten? Das ist ja alles\n"
"tautologisches Zeugs...\n"
"\n"
"**Robo**: Dann behaupte das doch."
msgstr ""

#: Game.Levels.SetTheory.L02_Empty
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L02_Empty
msgid "Der Junge rennt weiter.\n"
"\n"
"**Du**: So wird das ganze schon angenehmer.\n"
"\n"
"**Robo**: Die Leere Menge schreibst du mit `\\empty` falls du die nochmals brauchst."
msgstr ""

#: Game.Levels.SetTheory.L03_Subset
msgid "Teilmengen"
msgstr ""

#: Game.Levels.SetTheory.L03_Subset
msgid "Ihr bemerkt, dass mit dem Jungen noch zwei andere\n"
"Kinder zuh√∂rten. Eines der beiden M√§dchen hat ebenfalls eine Frage."
msgstr ""

#: Game.Levels.SetTheory.L03_Subset
msgid "**Robo**: `A ‚äÜ B` ist als `‚àÄ x, x ‚àà A ‚Üí x ‚àà B` definiert.\n"
"\n"
"**Du**: Also kann ich mit `intro` anfangen, wie ich das bei einem `‚àÄ` funktioniert?\n"
"\n"
"**Robo**: Das ist korrekt."
msgstr ""

#: Game.Levels.SetTheory.L03_Subset
msgid "**Robo**: Das d√ºrfte eine Trivialit√§t sein."
msgstr ""

#: Game.Levels.SetTheory.L03_Subset
msgid "`A ‚äÜ B` ist definiert als `‚àÄ x, x ‚àà A ‚Üí x ‚àà B`.\n"
"\n"
"(`\\sub`)"
msgstr ""

#: Game.Levels.SetTheory.L03_Subset
msgid "Damit drehen sich die beiden M√§dchen um und folgen dem Jungen."
msgstr ""

#: Game.Levels.SetTheory.L04_SubsetEmpty
msgid "Teilmengen"
msgstr ""

#: Game.Levels.SetTheory.L04_SubsetEmpty
msgid "Etwas weiter kommt ihr an einem kleinen Gem√ºsestand vorbei. Da ihr nicht so\n"
"richtig einen Plan habt, fragt ihr den Verk√§ufer.\n"
"\n"
"**Verk√§ufer**: Hier ist was ganz Wichtiges, was ihr noch oft brauchen werdet:\n"
"Ein zentrales Lemma ist `Subset.antisymm_iff` welches folgendes sagt:\n"
"\n"
"```\n"
"lemma antisymm_iff {Œ± : Type} {A B : Set Œ±} :\n"
"  A = B ‚Üî A ‚äÜ B ‚àß B ‚äÜ A\n"
"```\n"
"\n"
"**Verk√§ufer**: Fast immer wenn man Gleichheiten von Mengen zeigen muss, will\n"
"man diese in zwei Ungleichungen aufteilen. Hier, ich gebe euch mal ein\n"
"Beispiel:"
msgstr ""

#: Game.Levels.SetTheory.L04_SubsetEmpty
msgid "**Du**: Ja, die einzige Teilmenge der leeren Menge ist die leere Menge.\n"
"Das wird schon stimmen.\n"
"\n"
"**Verk√§ufer**: Also zeig mir das mal!"
msgstr ""

#: Game.Levels.SetTheory.L04_SubsetEmpty
msgid "**Robo**: Fang doch einmal mit `constructor` an."
msgstr ""

#: Game.Levels.SetTheory.L04_SubsetEmpty
msgid "**Verk√§ufer**: Jetzt k√∂nnt ihr mein Lieblingslemma brauchen!\n"
"\n"
"Dann sind `s ‚äÜ ‚àÖ` und `‚àÖ ‚äÜ s` separat zu zeigen."
msgstr ""

#: Game.Levels.SetTheory.L04_SubsetEmpty
msgid "**Robo**: Was kann man denn mit `¬´{h}¬ª` jetzt machen?\n"
"\n"
"**Du**: Wenn ich damit umschreibe erhalte ich `‚àÖ ‚äÜ ‚àÖ`.\n"
"\n"
"**Robo**: Was `rw` als Reflexivit√§t direkt l√∂st!"
msgstr ""

#: Game.Levels.SetTheory.L04_SubsetEmpty
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L04_SubsetEmpty
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L05_Empty
msgid "Empty"
msgstr ""

#: Game.Levels.SetTheory.L05_Empty
msgid "**Robo**: Ist das denn wirklich so wichtig?\n"
"\n"
"**Verk√§ufer**: Hier, beantworte mir doch mal folgendes."
msgstr ""

#: Game.Levels.SetTheory.L05_Empty
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L05_Empty
msgid "jetzt k√∂nntest du ¬´{h8}¬ª mit `rcases` aufteilen"
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "Nonempty"
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Du**: Kann ich noch mehr √ºben?\n"
"\n"
"**Verk√§ufer**: Das Gegenteil von `A = ‚àÖ` ist `A ‚â† ‚àÖ`, aber in Lean wird der Ausdruck `A.Nonempty` bevorzugt.\n"
"Dieser ist dadurch existiert, dass in `A` ein Element existiert: `‚àÉx, x ‚àà A`.\n"
"\n"
"Zeige dass die beiden Ausdr√ºcke √§quivalent sind:"
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Robo**: Am besten f√§ngst du mit `unfold Set.Nonempty` an."
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "`push_neg` kann hier helfen."
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Du**: Eben hatten wir doch etwas zu `¬´{s}¬ª = ‚àÖ`.\n"
"\n"
"**Robo**: Das war `eq_empty_iff_forall_not_mem`. Du kannst ja einen\n"
"Widerspruchsbeweis anfangen, dann kannst du dieses Lemma an der Annahme `¬´{s}¬ª = ‚àÖ`\n"
"benutzen!"
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Robo** Widerspruch war `by_contra hf`."
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Du**: Also ich weiss, dass es ein `x` gibt in `¬´{s}¬ª` und dass gleichzeitig alle\n"
"`x` nicht in `¬´{s}¬ª` sind, das ist doch ein Widerspruch!\n"
"\n"
"**Robo**: Ja aber nur `contradiction` wird noch nicht reichen, da diese noch nicht\n"
"syntaktisch negationen voneinander sind.\n"
"\n"
"**Du**: Na dann sollte das zumindest eine Tautologie sein."
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Du**: Vermutlich sollten wir hier aber daf√ºr\n"
"einen Beweis per Widerspruch anfangen?"
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Robo**: F√ºr dieses Problem ist es vermutlich besser nur\n"
"`push_neg at ¬´{hf}¬ª` zu verwenden, damit `¬´{h}¬ª: ¬´{s}¬ª ‚â† ‚àÖ` unver√§ndert bleibt!\n"
"\n"
"**Du**: Wieso macht `push_neg` denn das?\n"
"\n"
"**Robo**: Weiss ich auch nicht‚Ä¶"
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Du**: Ist das nicht nochmals eine Seite des Lemmas von\n"
"vorhin?\n"
"\n"
"**Robo**: Ja, `eq_empty_iff_forall_not_mem` ist nochmals n√ºtzlich"
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Robo**: Mein System sagt, dass Kontraposition n√ºtzlich sein k√∂nnte.\n"
"\n"
"**Du**: Ja, dann sieht es schon wieder √§hnlich dem Lemma von vorhin."
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Robo**: `push_neg at *` k√∂nnte helfen die ganzen `¬¨` wegzukriegen."
msgstr ""

#: Game.Levels.SetTheory.L06_Nonempty
msgid "**Du**: Und wie hies das Lemma nochmals?\n"
"\n"
"**Robo**: `eq_empty_iff_forall_not_mem`."
msgstr ""

#: Game.Levels.SetTheory.L07_UnionInter
msgid "Schnittmenge und Vereinigung"
msgstr ""

#: Game.Levels.SetTheory.L07_UnionInter
msgid "Eine alte Dame kommt daher und wendet sich zu Verk√§ufer.\n"
"\n"
"**Dame**: Du, ich hatte einen Gedanken. Kannst du mir folgendes erkl√§ren?"
msgstr ""

#: Game.Levels.SetTheory.L08_UnionInter
msgid "Schnittmenge und Vereinigung"
msgstr ""

#: Game.Levels.SetTheory.L08_UnionInter
msgid "**Verk√§ufer**: Ich habe aber was interessanteres:"
msgstr ""

#: Game.Levels.SetTheory.L08_UnionInter
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L08_UnionInter
msgid "**Robo**: Ich habe dir ein paar Sachen aus meinem Speicher zusammengekratzt."
msgstr ""

#: Game.Levels.SetTheory.L08_UnionInter
msgid "mit `union_assoc` und `union_diff_distrib` kannst du\n"
"auf der rechten Seite weiterkommen."
msgstr ""

#: Game.Levels.SetTheory.L09_Complement
msgid "Komplement"
msgstr ""

#: Game.Levels.SetTheory.L09_Complement
msgid "**Dame**: Ok gut. Aber hier nochmals was, was ich in der Zeitung gelesen habe:"
msgstr ""

#: Game.Levels.SetTheory.L09_Complement
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L09_Complement
msgid "**Du**: Gleichheit von Mengen. Das ist sicher wieder ein Fall f√ºr beide\n"
"Inkusionen.\n"
"\n"
"**Robo**: Das war `Subset.antisymm_iff`."
msgstr ""

#: Game.Levels.SetTheory.L09_Complement
msgid "**Robo**: `‚äÜ univ` ist ein Fall f√ºr `simp`."
msgstr ""

#: Game.Levels.SetTheory.L09_Complement
msgid "Da `‚äÜ` als `‚àÄx, x ‚àà A ‚Üí x ‚àà B ` definiert ist, f√§ngst du\n"
"am besten mit `intro` an."
msgstr ""

#: Game.Levels.SetTheory.L09_Complement
msgid "Eine M√∂glichkeit ist, eine Fallunterscheidung zu machen: `by_cases g: ¬´{x}¬ª ‚àà ¬´{A}¬ª·∂ú`."
msgstr ""

#: Game.Levels.SetTheory.L09_Complement
msgid "Hier k√∂nnte `mem_of_subset_of_mem` hilfreich werden."
msgstr ""

#: Game.Levels.SetTheory.L09_Complement
msgid "Diese Richtung geben wir als Lemma: `not_mem_compl_iff`."
msgstr ""

#: Game.Levels.SetTheory.L10_Morgan
msgid "Morgansche Regeln"
msgstr ""

#: Game.Levels.SetTheory.L10_Morgan
msgid "**Verk√§ufer**: Haben Sie schon von Morgan geh√∂rt? Der hatte letztig dieses ungel√∂ste Problem!"
msgstr ""

#: Game.Levels.SetTheory.L10_Morgan
msgid "**Robo**: Oh du lieber Schaltkreis. Hier ist sind noch mehr aus meinem Speicher."
msgstr ""

#: Game.Levels.SetTheory.L11_SSubset
msgid "Strikte Teilmenge"
msgstr ""

#: Game.Levels.SetTheory.L11_SSubset
msgid "Die Dame geht mit ihrem Einkauf davon.\n"
"\n"
"**Verk√§ufer**: Wisst ihr, seit einer weile redet sie eigentlich immer √ºber den Unterschied\n"
"von `‚äÇ` und `‚äÜ`, aber heute nicht. K√∂nnt ihr mir schon mal helfen, damit ich morgen\n"
"gewappnet bin?"
msgstr ""

#: Game.Levels.SetTheory.L11_SSubset
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L12_Insert
msgid "Konkrete Mengen"
msgstr ""

#: Game.Levels.SetTheory.L12_Insert
msgid "**Du**: Das ist ja alles sch√∂n und gut, aber ich weiss immernoch nicht, wie\n"
"ich eine ganz simple Menge wie `{4, 9}` notiere‚Ä¶\n"
"\n"
"**Verk√§ufer**: Genau so! Aber diese endlichen Mengen sind alles iterative\n"
"Konstruktionen aus `Set.insert` und `singleton`. Hier zum Beispiel:"
msgstr ""

#: Game.Levels.SetTheory.L12_Insert
msgid "Die Menge `{4, 9}` ist per Definition `{4} ‚à™ {9}`."
msgstr ""

#: Game.Levels.SetTheory.L12_Insert
msgid "**Du**: Das w√§r ja dann `rfl`."
msgstr ""

#: Game.Levels.SetTheory.L13_Insert
msgid "Konkrete Mengen"
msgstr ""

#: Game.Levels.SetTheory.L13_Insert
msgid "**Verk√§ufer**: Ja, also hier ein besseres Beispiel:\n"
"\n"
"Um zu √ºberpr√ºfen, dass gewisse Elemente in\n"
"konkreten Mengen enthalten sind, gibt es nicht direkt eine Taktik, aber ein\n"
"einfaches Rezept:\n"
"\n"
"```\n"
"simp_rw [mem_insert_iff, mem_singleton_iff] at *\n"
"```\n"
"\n"
"vereinfacht Aussagen der Form `6 ‚àà {0, 6, 1}` zu `(6 = 0) ‚à® (6 = 6) ‚à® (6 = 1)`,\n"
"und dann kann `tauto` diese Aussage beweisen.\n"
"\n"
"Bei `‚äÜ` kann man wie schon vorher zuerst mit `intro x hx` die Definition\n"
"auseinandernehmen und dann gleich vorgehen."
msgstr ""

#: Game.Levels.SetTheory.L13_Insert
msgid "Fang wieder mit `rw [subset_def]` oder direkt mit `intro` an."
msgstr ""

#: Game.Levels.SetTheory.L13_Insert
msgid "**Du**: Das ist ja die eigentliche Aufgabe.\n"
"\n"
"**Verk√§ufer**: Solche Aufgaben sind immer mit\n"
"`simp_rw [mem_insert_iff, mem_singleton_iff] at *` gefolgt von `tauto` l√∂sbar!"
msgstr ""

#: Game.Levels.SetTheory.L13_Insert
msgid "**Robo**: Das kann aber ganz sch√∂n lang werden.\n"
"\n"
"**Verk√§ufer**: Ich habe mir noch nie √ºberlegt, was passiert wenn man √ºber zu gro√üe Mengen\n"
"nachdenkt‚Ä¶"
msgstr ""

#: Game.Levels.SetTheory.L13_Insert
msgid "Damit l√§sst ihr den Verk√§ufer mit seinen Mengen an Obst zur√ºck und wandert weiter."
msgstr ""

#: Game.Levels.SetTheory.L14_SetOf
msgid "Mengen mit Konditionen"
msgstr ""

#: Game.Levels.SetTheory.L14_SetOf
msgid "Eine wichtige mathematische Notation ist Teilmengen zu erstellen,\n"
"die gewissen Bedingungen unterliegen.\n"
"\n"
"`{n : ‚Ñï | Odd n}` ist die Menge aller nat√ºrlichen Zahlen, die ungerade sind.\n"
"Diese Konstruktion hat in Lean den Namen `setOf`\n"
"\n"
"Um zu beweisen, dass ein Element in einer Teilmenge mit Bedingungen ist, braucht\n"
"man `rw [mem_setOf]`. Danach muss man zeigen, dass die Bedinung f√ºr\n"
"dieses Element erf√ºllt ist."
msgstr ""

#: Game.Levels.SetTheory.L14_SetOf
msgid "**Robo**: Zur Erinnerung, wenn du nicht mehr weisst, wie `Odd` definiert\n"
"ist, benutze `rw [Odd]`."
msgstr ""

#: Game.Levels.SetTheory.L15_Powerset
msgid "Potenzmenge"
msgstr ""

#: Game.Levels.SetTheory.L15_Powerset
msgid "Eine andere wichtige Menge ist die Potenzmenge einer Menge, welche als\n"
"`ùí´ A` geschrieben wird (`\\powerset`). Diese ist als `{S | S ‚äÜ A}` definiert, also\n"
"alle Mengen, die in $A$ enthalten sind.\n"
"\n"
"Eines der wichtigsten Lemmas ist `mem_powerset_iff: x ‚àà ùí´ s ‚Üî x ‚äÜ s` welches\n"
"im Grunde die Definition einsetzt."
msgstr ""

#: Game.Levels.SetTheory.L15_Powerset
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L15_Powerset
msgid "**Robo**: Fang mal mit `intro` an, wie das bei `‚äÜ` fast immer der Fall ist."
msgstr ""

#: Game.Levels.SetTheory.L15_Powerset
msgid "**Robo**: Als n√§chstes must du noch die Annahme `¬´{A}¬ª ‚àà ùí´ X ‚à™ ùí´ Y` zu\n"
"`¬´{A}¬ª ‚àà (ùí´ X) ‚à® ¬´{A}¬ª ‚àà (ùí´ Y)` wechseln. Daf√ºr kennst du schon ein Lemma."
msgstr ""

#: Game.Levels.SetTheory.L15_Powerset
msgid "**Robo**: Jetzt w√§r der Zeitpunkt um `mem_powerset_iff` mal √ºberall anzuwenden."
msgstr ""

#: Game.Levels.SetTheory.L15_Powerset
msgid "**Robo**: Jetzt kann `tauto` den rest √ºbernehmen, vielleicht solltest du diese\n"
"Hilfe annehmen.\n"
"Wenn nicht, brauchst du vermutlich die Lemmas `Set.subset_union_of_subset_left`\n"
"und `Set.subset_union_of_subset_right`"
msgstr ""

#: Game.Levels.SetTheory.L16_Disjoint
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L16_Disjoint
msgid "Um anzunehmen, dass zwei Mengen disjunkt sind schreibt man\n"
"`Disjoint S T`, welches dadurch definiert ist das die\n"
"einzige gemeinsame Teilmenge die leere Menge ist,\n"
"also etwa `A ‚äÜ S ‚Üí A ‚äÜ T ‚Üí A ‚äÜ ‚àÖ`.\n"
"\n"
"Beachte, dass `Disjoint` in Lean genereller definiert ist als\n"
"f√ºr Mengen, deshalb siehst du die Symbole\n"
"`‚â§` anstatt `‚äÜ` und `‚ä•` anstatt `‚àÖ`, aber diese bedeuten genau\n"
"das gleiche."
msgstr ""

#: Game.Levels.SetTheory.L16_Disjoint
msgid "**Robo**: √ñffne als erstes mal `Disjoint`."
msgstr ""

#: Game.Levels.SetTheory.L16_Disjoint
msgid "**Robo**: Das sieht jetzt ein bisschen gef√ºrchig aus, aber das ist einfach ein `‚àÉ`.\n"
"Was du jetzt angeben musst, ist eine Menge, die Teilmenge beider Mengen\n"
"`{n : ‚Ñ§ | ‚àÉ k, n = 2 * k}` und `{3, 5, 6, 9, 11}` ist."
msgstr ""

#: Game.Levels.SetTheory.L16_Disjoint
msgid "**Robo**: Versuch einmal `use {6}`."
msgstr ""

#: Game.Levels.SetTheory.L16_Disjoint
msgid "**Robo**: Schau mal wie weit `simp` kommt."
msgstr ""

#: Game.Levels.SetTheory.L17_SetOf
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L17_SetOf
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L17_SetOf
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L18_SetOf
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L18_SetOf
msgid "Zu der Teilmengen-Schreibweise (`SetOf`) gibt es noch zwei spezielle\n"
"Syntax, die abundzu auftreten.\n"
"\n"
"Der erste ist `{ x ‚àà S | 0 ‚â§ x}` ( f√ºr z.B `(S : Set ‚Ñ§)`),\n"
"welcher eine Abk√ºrzung f√ºr `{ x : ‚Ñ§ | x ‚àà S ‚àß 0 ‚â§ x}` ist.\n"
"Entsprechend hilft auch hier `setOf_and`."
msgstr ""

#: Game.Levels.SetTheory.L18_SetOf
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L19_Subtype
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L19_Subtype
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L19_Subtype
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L20_UnionInter
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L20_UnionInter
msgid "Wir haben bereits `‚à™` und `‚à©` kennengelernt. Von beiden gibt es auch eine Version f√ºr Familien\n"
"von Mengen: $\\bigcup_i A_ i$ und $\\bigcap_j B_ j$."
msgstr ""

#: Game.Levels.SetTheory.L20_UnionInter
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L21_Summary
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L21_Summary
msgid ""
msgstr ""

#: Game.Levels.SetTheory.L21_Summary
msgid ""
msgstr ""

#: Game.Levels.SetTheory
msgid "Synolos"
msgstr ""

#: Game.Levels.SetTheory
msgid "[Du betrittst einen Teil des Universums, der noch in der Entstehung ist.\n"
"Lass dich auf Ungereimtheiten, Stolperfallen, und Handlungsl√∂cher ein. Viel G√ºck!]\n"
"\n"
"Der gr√∂√üere der beiden Monde sieht dunkelrot und karg aus. Trotzdem sollen dort nomadische\n"
"Gesellschaften wohnen, die sich in der Ein√∂de zurechtfinden.\n"
"\n"
"Ihr steuert einen der wenigen befestigten Standorte am Fu√üe eines Berges an.\n"
"\n"
"**Robo**: Die Bev√∂lkerung hier lebt so abgekapselt vom Rest des Universums, dass sie sich\n"
"vermutlich noch viel besser mit alter Sprache und Schrift auskennt.\n"
"\n"
"**Du**: Hoffen wir, dass sie uns weiterhelfen k√∂nnen dieses Buch der Urbilder zu entschl√ºsseln.\n"
"\n"
"Sofort begr√º√üt euch eine √§ltere Frau, die sich als *Mengea*, die Besch√ºtzerin des Mondes,\n"
"vorstellt."
msgstr ""

#: Game.Levels.SetTheory
msgid "[WIP] Mengenlehre 2"
msgstr ""

#: Game.Levels.SetTheory
msgid "Dieser Planet ist kahl un leer und noch unentdeckt. Zeit und Geschichte scheint es\n"
"hier nicht zu geben."
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "Matrix"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "[Es] fragt euch folgendes:\n"
"\n"
"```\n"
"def FirstColumnSumZero {n : ‚Ñï} [NeZero n] :\n"
"    Submodule ‚Ñù (Mat[n,n][‚Ñù]) where\n"
"  carrier := {A | ‚àë i, A i 0 = 0}\n"
"  add_mem' := sorry\n"
"  zero_mem' := sorry\n"
"  smul_mem' := sorry\n"
"```\n"
"\n"
"**Du**: Also die Frage ist, ob die Menge aller `n√ón`-Matrizen √ºber $\\mathbb{R}$ mit der\n"
"ersten Spalte null auch wieder einen $\\mathbb{R}$-Vektorraum bildet. Aber wie gehe ich jetzt mit\n"
"dieser Struktur vor? Robo, kannst du mir helfen?\n"
"\n"
"**Robo**: Klar, den Untervektorraum kann ich definieren, aber ich verstehe die Mathe nicht.\n"
"Hier sind die drei Goals die noch √ºbrig sind:"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Du**: Ich verstehe, beim ersten m√ºssen wir zeigen, dass `a + b` wieder in `M` ist."
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Du**: Haben wir nicht schon gesehen, was dieses `‚àà M` bedeutet?\n"
"\n"
"**Robo**: Wir hatten einmal `Set.mem_setOf`, das wird dir helfen!"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Du**: also vermutlich will ich ja jetzt sagen, dass\n"
"$(¬´{a}¬ª + ¬´{b}¬ª)(i,j) = a(i,j) + b (i,j)$ ist.\n"
"\n"
"**Robo**: Das ist `Matrix.add_apply`. Und vergiss nicht, dass man unter Summen\n"
"`simp_rw` verwenden muss anstatt `rw`!"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Du**: Dar√ºber hatten wir mal auf Babylon geredet, wie hiess dass nochmals?"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Robo**: `sum_add_distrib`."
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Robo**: Ob deine Annahmen wohl was n√ºtzen?"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Robo**: Du k√∂nntest aber noch mit `rw [mem_setOf] at *` die Annahmen\n"
"in die richtige Form bringen!"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Robo**: Dieses Goal verlangt, dass `0` in `M` liegt.\n"
"\n"
"**Du**: Ich w√ºrd wohl wie vorher gleich mit `mem_setOf` anfangen!"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Robo**: Den Fall wo alles Null ist kann `simp` ganz gut!"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Du**: Ah und das letzte Goal will dass `r ‚Ä¢ a` in `M` liegt!\n"
"\n"
"**Robo**: sieht ganz so aus!"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Robo**: `mem_setOf`, dass weisst du doch schon!"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Du**: Ich weiss nicht, was ich mit der Skalarmultiplikation mache. eigenlich ist der\n"
"innere Teil ja einfach `¬´{c}¬ª ‚Ä¢ (¬´{a}¬ª i 0)`.\n"
"\n"
"**Robo**: Das klingt nach einem Fall f√ºr `simp`!"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Robo**: Meine Datenbank mit alten Konversationen sagt, dass wir mal `mul_sum`\n"
"hatten auf Babylon."
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Robo**: Du willst von rechts nach links umschreiben, also brauchst du hier\n"
"ein `‚Üêmul_sum`."
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "**Robo**: Du k√∂nntest aber noch mit `rw [mem_setOf] at ¬´{ha}¬ª` die Annahmen\n"
"in die richtige Form bringen!"
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid ""
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid ""
msgstr ""

#: Game.Levels.Matrix.L01_VectorSpace
msgid "Dieses Theorem sollte eigentlich woanders eingef√ºhrt werden"
msgstr ""

#: Game.Levels.Matrix
msgid "Matrix"
msgstr ""

#: Game.Levels.Matrix
msgid "Dieser Planet ist kahl un leer und noch unentdeckt. Zeit und Geschichte scheint es\n"
"hier nicht zu geben."
msgstr ""

#: Game.Levels.MatrixTrace.L01_SMulEBasis
msgid "Standardbasis"
msgstr ""

#: Game.Levels.MatrixTrace.L01_SMulEBasis
msgid "Den Spuren folgend, findet ihr ein St√ºck Pergament, auf dem zuoberst\n"
"eine Notiz steht.\n"
"\n"
"```\n"
"E i j := stdBasisMatrix i j (1 : ‚Ñù)\n"
"```\n"
"\n"
"Darunter ein bisschen wildes Gekritzel, das aber deutlich mit einer klaren\n"
"Zeile angefangen hat:"
msgstr ""

#: Game.Levels.MatrixTrace.L01_SMulEBasis
msgid "`E i j` ist die `n √ó n`-Matrix (mit Werten in `‚Ñù`) mit einer `1` an\n"
"Stelle $(i, j)$ und null √ºberall sonst.\n"
"\n"
"Bemerkung: Dies ist eine spezialisierte Form der generellen `stdBasisMatrix i j (a : R)`,\n"
"welche auch nicht-quadratisch sein kann und einen beliebigen Wert `a` aus einem beliebigen\n"
"Ring annehmen kann.\n"
"\n"
"Das Spiel bevorzugt `E`, um die Lesbarkeit zu erh√∂hen."
msgstr ""

#: Game.Levels.MatrixTrace.L01_SMulEBasis
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L01_SMulEBasis
msgid "**Du**: Welches Wesen auch immer hier Spuren hinterlassen hat ‚Äì mir scheint, es mag Matrizen. Was meints du?\n"
"\n"
"**Robo**: Ja! `stdBasisMatrix i j a` kenne ich, das ist die Matrix, die an der Position `(i, j)` den Eintrag `a` hat und sonst √ºberall Null ist.\n"
"\n"
"**Du**: Und die `E`s sind dann einfach eine Abk√ºrzung f√ºr den Fall `a = 1`?\n"
"\n"
"**Robo**: So sieht's aus. Und `A i j` ist einfach der Eintrag der Matrix `A` an der Position `(i, j)`.\n"
"\n"
"**Du**: Ah, verstehe. Da steht also kein Produkt von Matrizen, sondern nur eine Skalarmultiplikation. Dann ist das ja einfach.\n"
"\n"
"**Robo**: Ja. Ich denke wenn du mit `unfold E` anf√§ngst, geht der Rest wie von selbst."
msgstr ""

#: Game.Levels.MatrixTrace.L01_SMulEBasis
msgid "**Du**: Ob das wohl was bringt?\n"
"\n"
"**Robo**: Ich speichere das mal als `Matrix.smul_ebasis` ab, falls wir es nochmals\n"
"brauchen.\n"
"\n"
"Damit folgt ihr weiter der Spur."
msgstr ""

#: Game.Levels.MatrixTrace.L02_EBasis
msgid "Falsche Indizes"
msgstr ""

#: Game.Levels.MatrixTrace.L02_EBasis
msgid "Kurze Zeit sp√§ter findet ihr zwei sehr √§hnlichen Zettel, wieder\n"
"vollgekritzelt, fast alles durchgestrichen.\n"
"Die erste Zeile aber l√§sst sich jeweils gerade noch ausmachen."
msgstr ""

#: Game.Levels.MatrixTrace.L02_EBasis
msgid "**Robo**: Ich speichere dieses `E.mul_of_ne` auch mal, wer wei√ü.\n"
"\n"
"  **Du**: Jetzt bin ich aber neugierig, wer diese Zettel hier verloren oder weggeworfen hat. Komm, lass uns weitergehen."
msgstr ""

#: Game.Levels.MatrixTrace.L02_EBasis
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L02_EBasis
msgid "**Du**: Das sieht jetzt aber nach Matrizen-Multiplikation aus.\n"
"M√ºsste so auch stimmen."
msgstr ""

#: Game.Levels.MatrixTrace.L02_EBasis
msgid "**Robo**: Vergiss aber nicht, dass `simp` die Annahme `¬´{h}¬ª` explizit braucht!"
msgstr ""

#: Game.Levels.MatrixTrace.L03
msgid "Richtige Indizes"
msgstr ""

#: Game.Levels.MatrixTrace.L03
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L03
msgid "**Du**: Jetzt bin ich aber neugierig, wer diese Zettel hier verloren oder weggeworfen hat. Komm, lass uns weitergehen."
msgstr ""

#: Game.Levels.MatrixTrace.L03
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L03
msgid "**Du**:  Sieht auch richtig aus."
msgstr ""

#: Game.Levels.MatrixTrace.L04_MatrixEqSum
msgid "Summe von Basiselementen"
msgstr ""

#: Game.Levels.MatrixTrace.L04_MatrixEqSum
msgid "Ihr kommt an eine Stelle, wo das Gras auf einer gr√∂√üeren, quadratischen\n"
"Fl√§che heruntergetrampelt ist. Spuren f√ºhren kreuz und queer und in verschiedene\n"
"Richtungen weg.\n"
"\n"
"Ein bisschen planlos sucht ihr die Stelle ab und findet verschiedenste Pergamentst√ºcke.\n"
"Die meisten sind leer oder unleserlich, aber eines kannst du entziffern."
msgstr ""

#: Game.Levels.MatrixTrace.L04_MatrixEqSum
msgid "Du beschliesst einer besonders markanten Spur zu folgen. Robo zieht dir hinterher und schnappt\n"
"sich beim gehen noch ein willk√ºrliches St√ºck Pergament vom Boden."
msgstr ""

#: Game.Levels.MatrixTrace.L04_MatrixEqSum
msgid "Sagt aus, dass man jede $(n √ó n)$-Matrix (√ºber $\\mathbb{R}$) $A$ schreiben kann\n"
"als $A = \\sum_{i=0}^{n-1}\\sum_{j=0}^{n-1} A_{ij} \\cdot E(i, j)$.\n"
"\n"
"Siehe auch `matrix_eq_sum_std_basis`, welches die generalisierte Form f√ºr\n"
"$(m √ó n)$-Matrix (√ºber beliebigem $R$) ist."
msgstr ""

#: Game.Levels.MatrixTrace.L04_MatrixEqSum
msgid "Die generellere Version von `matrix_eq_sum_ebasis`. Siehe dort."
msgstr ""

#: Game.Levels.MatrixTrace.L04_MatrixEqSum
msgid "**Du**: Das scheint einfach zu sagen, dass diese `E i j` ein Erzeugendensystem f√ºr den Raum der Matrizen bilden.\n"
"\n"
"**Robo**: Da kannst du bestimmt gleich die Resultate anwenden, die wir schon gefunden haben!"
msgstr ""

#: Game.Levels.MatrixTrace.L04_MatrixEqSum
msgid "**Robo**: Unter Summen braucht man `simp_rw`."
msgstr ""

#: Game.Levels.MatrixTrace.L04_MatrixEqSum
msgid "**Robo**: Ja gut, du kannst auch einfach den Beweis vom ersten Pergament wiederholen.\n"
"Nur zu, √úbung macht den Meister.\n"
"\n"
"**Du**: Schon gut, ich hab kein mechanisches Hirn wie du."
msgstr ""

#: Game.Levels.MatrixTrace.L04_MatrixEqSum
msgid "**Robo**: Ach ja!  So wie es jetzt hier steht, kenne ich die Aussage aus meiner Bibliothek.\n"
"Das ist genau `apply matrix_eq_sum_std_basis`.\n"
"\n"
"**Du**: Super! Dann brauchen wir uns ja gar nicht damit aufhalten."
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "Einheitsmatrix"
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Du**: Zeig mal, was hast du da? Was zur Einheitsmatrix? Passend f√ºr unsere Sammlung?\n"
"\n"
"**Robo**: Ja, schau. Ich glaube, hier kannst Du gleich mit `matrix_eq_sum_ebasis` beginnen.\n"
"\n"
"**Du**: Ich frage mich, ob wir noch wichtiges auf dem Platz zur√ºckgelassen haben?\n"
"\n"
"**Robo**: Egal, jetzt sind wir schon ein gutes St√ºcken weiter. Probier jetzt hier einmal!"
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Du**: Ich habe das Gef√ºhl, wir sind jemandem auf der Spur, der sich f√ºr die\n"
"die Diagonale von Matrizen interessiert.  Aber ich bekomme langsam Durst!"
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Du**: Ich denke, die beiden Summen sind identisch, weil jeder Summand identisch ist.\n"
"Denkst du das funktioniert √§hnlich wie mit den Funktionen, da bei dieser Bibliothek?\n"
"\n"
"**Robo**: Die beiden Taktiken `congr` und `ext` k√∂nnten dir hier tats√§chlich helfen.\n"
"\n"
"*(von oben)*: Wurde noch nicht erkl√§rt, aber zuk√ºnftig werden `ext` und\n"
"`congr` schon fr√ºher eingef√ºhrt."
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Du**: Oh, jetzt habe ich nicht nur den Summationsindex, sondern auch noch die beiden\n"
"Indices `¬´{r}¬ª,¬´{s}¬ª` der Matrizen eingef√ºhrt. Aber das sollte passen. Nur‚Ä¶ die verbleibende Summe\n"
"ist ja √ºberall Null au√üer beim Index `¬´{i}¬ª`.\n"
"\n"
"**Robo**: Ist das so?  Lass mich mal suchen‚Ä¶  Nicht sch√∂n, sollte aber funktionieren:  mit `rw [‚Üê Finset.sum_subset (Finset.subset_univ {¬´{i}¬ª})]`\n"
"solltest du die Summe so umschreiben k√∂nnen, dass sie nur √ºber dem Singleton `{¬´{i}¬ª}` l√§uft."
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Du**: Danke, das hilft! Dieser Schritt sollte einfach sein: Eine Summe √ºber ein Element,\n"
"bei diesem ist `1 i i` wieder Eins, und `1 ‚Ä¢ _` vereinfacht sich auch!"
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Robo**: `simp` klingt wirklich nach einer guten Idee."
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Du**: Aber was mache ich hier? `¬´{h‚ÇÇ}¬ª` sagt ja mehr oder weniger dass `i ‚â† x` ist.\n"
"\n"
"**Robo**: Ja, aber nicht ganz. F√ºhr das doch mit `have h‚ÇÉ : i ‚â† x` ein und zeig das kurz!"
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Robo**: Umgekehrt w√§re es n√ºtzlicher, da\n"
"`1 i x` als `if i = x then _ else _` definiert ist!\n"
"\n"
"**Du**: Du hast recht, ich brauch gleich `i = x` oder `i ‚â† x`. Lass mich das √§ndern."
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Du**: Als erstes w√ºrde ich mal schauen, ob sich `¬´{h‚ÇÇ}¬ª` vereinfacht."
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Du**: Hmm, jetzt ist das erstmal verdreht.\n"
"\n"
"**Robo**: Erinnere dich an `symm`!\n"
"\n"
"**Du**: Richtig, das brauchten wir ja schon bei diesem wilden Typen mit seinen F√∂rderb√§ndern."
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Du**: Wie setze ich denn jetzt die Definition f√ºr `1 ¬´{i}¬ª ¬´{x}¬ª` ein?\n"
"\n"
"**Robo**: `Matrix.one_apply`!"
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "**Robo**: Und da das falsch ist, kannst du mit `rw` und `if_neg` weiterkommen."
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "Dieses Theorem sollte eigentlich woanders eingef√ºhrt werden"
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "Dieses Theorem sollte eigentlich woanders eingef√ºhrt werden"
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "Zwei Funktionen sind gleich, wenn sie auf allen Elementen gleich sind.\n"
"\n"
"Wenn das Goal `f = g` ist, kann man mit `ext i`, ein Element `i` einf√ºhren, und dann zeigen,\n"
"dass `f i = g i` ist.\n"
"\n"
"`ext` versucht, so viele Indices einzuf√ºgen wie m√∂glich `funext i` f√ºhrt nur den spezifizierten ein."
msgstr ""

#: Game.Levels.MatrixTrace.L05_EBasisDiagSum
msgid "`congr` versucht, eine Gleichung `_ = _` auf eine Gleichung von Untertermen zu reduzieren. Zum\n"
"Beispiel ein Goal der Form `f a = f b` wird durch `congr` zu `a = b` reduziert."
msgstr ""

#: Game.Levels.MatrixTrace.L06_EBasisEqOnDiag
msgid "Ein nihilierter Kommutator"
msgstr ""

#: Game.Levels.MatrixTrace.L06_EBasisEqOnDiag
msgid "Der Spur folgend kommt ihr an einem gro√üen Baum. Im Schatten findet ihr ein regloses Etwas:\n"
"\n"
"$$\n"
"[A, B] = AB - BA\n"
"$$\n"
"\n"
"**Robo**:  Ach ja, ein Kommutator!\n"
"\n"
"**Du**: Der sieht aber ziemlich nihiliert aus.  Ich glaube, der ist verdurstet.\n"
"\n"
"**Robo**: Und schau, hier ist noch was in den Baum gekritzelt."
msgstr ""

#: Game.Levels.MatrixTrace.L06_EBasisEqOnDiag
msgid "**Robo**: Ich glaube, die Annahme, dass Kommutatoren nihiliert werden, nehmen wir jetzt erst\n"
"einmal mit.\n"
"\n"
"**Du**: Sch√∂n.  Sagte ich bereits, dass ich langsam Durst habe?"
msgstr ""

#: Game.Levels.MatrixTrace.L06_EBasisEqOnDiag
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L06_EBasisEqOnDiag
msgid "**Du**: Mit anderen Worten: Wenn `f` Kommutatoren nihiliert, dann stimmen seine Werte\n"
"auf allen `E i i` √ºberein. Stimmt das??\n"
"\n"
"**Robo**: Lass es uns herausfinden!"
msgstr ""

#: Game.Levels.MatrixTrace.L06_EBasisEqOnDiag
msgid "**Du**: Aber was soll ich denn mit unserer Annahme `¬´{h‚ÇÅ}¬ª` anfangen!\n"
"Ich m√ºsste √ºberhaupt erst einmal eine Multiplikation haben.\n"
"\n"
"**Robo**: Du m√ºsstest ein Matrizenprodukt `A * B` finden, f√ºr das  `f (E i i) = f (A * B) = f (E j j)` gilt.\n"
"Dann k√∂nnstest du `trans f (A * B)` schreiben, um zwei Beweisziele ‚Äì `f (E i i) = f (A * B)` und `f (A * B) = f (E j j)` ‚Äì zu erhalten,\n"
"bei denen `¬´{h‚ÇÅ}¬ª` vielleicht anwendbar ist."
msgstr ""

#: Game.Levels.MatrixTrace.L06_EBasisEqOnDiag
msgid "**Robo**: Hatten wir nicht `E i k = (E i j) * (E j k)` auf einem dieser Zettel?"
msgstr ""

#: Game.Levels.MatrixTrace.L06_EBasisEqOnDiag
msgid "**Robo**: Hast du das nicht alles gemacht, weil du `¬´{h‚ÇÅ}¬ª` brauchen\n"
"wolltest?\n"
"\n"
"**Du**: Ah ja, stimmt!"
msgstr ""

#: Game.Levels.MatrixTrace.L07_EBasisZeroOffDiag
msgid "Desinteresse"
msgstr ""

#: Game.Levels.MatrixTrace.L07_EBasisZeroOffDiag
msgid "Gleich neben dem Baum findest du noch eine Notiz, in der gro√ü `E i j` durchgestrichen ist.\n"
"\n"
"**Du**: Soll wohl hei√üen: `E i j` mit i ‚â† j interessieren nicht."
msgstr ""

#: Game.Levels.MatrixTrace.L07_EBasisZeroOffDiag
msgid "Die Spuren wirken mittlerweile viel frischer und ihr folgt ihnen schneller und\n"
"unvorsichtiger als zuvor."
msgstr ""

#: Game.Levels.MatrixTrace.L07_EBasisZeroOffDiag
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L07_EBasisZeroOffDiag
msgid "**Robo**: Wie k√∂nnten wir denn hier `¬´{h‚ÇÅ}¬ª` verwenden?\n"
"\n"
"**Du**: Wie w√§r's, wenn wir diesmal `E i j` als Produkt `E i j * E j j` schreiben?\n"
"\n"
"**Robo**:  Wieso gerade so?\n"
"\n"
"**Du**: Wenn ich in diesem Produkt die Faktoren vertausche, erhalte ich Null!  Hatten wir doch auch schon, `E.mul_of_ne` oder so etwas."
msgstr ""

#: Game.Levels.MatrixTrace.L07_EBasisZeroOffDiag
msgid "**Robo*: Wie du meinst. Dann probier doch am besten `trans f (E i j * E j j)`."
msgstr ""

#: Game.Levels.MatrixTrace.L07_EBasisZeroOffDiag
msgid "**Du**: Ehm, das sehe ich einfach von der Definition.\n"
"\n"
"**Robo**: Vergiss nicht `unfold E`, oder sag `simp`, dass es die Definition von `E` benutzen soll (`simp [E]`)."
msgstr ""

#: Game.Levels.MatrixTrace.L07_EBasisZeroOffDiag
msgid "**Robo**: Und hier wolltest du jetzt kommutieren?\n"
"\n"
"**Du**: Genau!"
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "Die Summe der Summe der Summe"
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "Ihr findet nochmals einen Hinweis, aber in der Eile verliert ihr die F√§hrte.\n"
"Du bist inzwischen sehr durstig.  \n"
"W√§hrend Robo die n√§here Umgebung absucht, setzt du dich ersch√∂pft hin und\n"
"starrst unter der warmen Sonne etwas beduselt auf den Pergamentfetzen."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du**: Na endlich.  \n"
"\n"
"Robo reicht dir eine Flasche Wasser.\n"
"\n"
"**Du**: Wo hast du die denn auf einmal her? \n"
"\n"
"**Robo**: Trick 17.\n"
"\n"
"**Du**:  Und hast du die F√§hrte wiedergefunden?\n"
"\n"
"**Robo**:  Ja, komm mit! Da hinten hab ich etwas gesehen."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du**: Ich versteh beim besten Willen nicht, was das jetzt soll! \n"
"Vermutlich sollte ich das `A` in `f A` als Summe von Basismatrizen\n"
"schreiben, nicht aber das andere `A` weiter hinten.\n"
"\n"
"**Robo** (*aus der Ferne*): `nth_rw 1 [ ... ]`! Funktioniert wie `rw`."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du** (*schreiend*): Was meinst du damit?\n"
"\n"
"**Robo** (*ebenfalls schreiend*): Na, du willst bestimmt `matrix_eq_sum_ebasis A` anwenden, aber mit `nth_rw 1` und nicht mit `rw`.\n"
"`rw [matrix_eq_sum_ebasis A]` w√ºrde beide `A`s ersetzen."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du**: Hmm, `rw` ist tats√§chlich eine schlechte Idee. \n"
"Das sieht zu kompliziert aus. Lass es mich doch mit `nth_rw` versuchen."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du** (*in Gedanken*): Jetzt die Funktion in die Summe rein‚Ä¶ Und ja nicht an Wasser denken‚Ä¶\n"
"Auf Babylon gabs genug Wasser‚Ä¶ Woran war ich nochmals?"
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Robo** (*von irgendwo*): Das klingt nach `map_sum`, aber das hatten wir\n"
"auf Babylon nicht gesehen, das fantasierst du. Aber `simp` kennt dieses Lemma sonst auch."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du**: Ah ja, im Zweifelsfall vereinfachen."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du**: Die Summe der Summe der Summe der‚Ä¶\n"
"\n"
"**Robo*: Hey, woran bist du eigentlich?\n"
"\n"
"**Du**: Keine Ahnung!\n"
"\n"
"**Robo**: Mach doch folgenden Zwischenschritt:\n"
"\n"
"`trans ‚àë i, ‚àë j, if i = j then (A i j) * f (E i j) else 0`"
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du**: Summe gleich Summe, `congr`-`ext` macht da der Dumme."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Robo**: Vielleicht gleich nocheinmal?"
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du**: Und jetzt Fallunterscheidung zu `i = j`‚Ä¶"
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Robo**: `by_cases` war das, genau!"
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Robo**: Hier ist `if_pos ¬´{h‚ÇÇ}¬ª` n√ºtzlich."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Robo**: ‚Ä¶und hier `if_neg ¬´{h‚ÇÇ}¬ª`.\n"
"\n"
"**Du**: Wei√ü ich doch."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du**: `f (E i j)` ist doch Null, hatten wir doch schon gesehen!"
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Robo**: Und das hie√ü `zero_on_offDiag_ebasis`."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "**Du**: Und ich dachte schon das w√§r's.\n"
"\n"
"**Robo**: Fast, da ist noch die zweite H√§lfte des `trans`-Befehls oben. Diese H√§lfte\n"
"ist ganz einfach."
msgstr ""

#: Game.Levels.MatrixTrace.L08_EvalOnEBasis
msgid "Lineare Abbildungen (oder genereller \"additive\" Abbildungen) kann man mit einer\n"
"Summe vertauschen."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "Matrix"
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "Keine f√ºnfzig Meter weiter kommt ihr auf eine kleine Anh√∂he. \n"
"Robo zeigt auf einen Punkt in der Ferne.\n"
"\n"
"**Robo**: Schau mal, da liegt es! \n"
"\n"
"**Du**: Und was *ist* das???\n"
"\n"
"**Robo**:  Wei√ü nicht.  Aber mein Gef√ºhl sagt mir, diese Zettel sind eine Art Steckbrief.  Schau mal, hier ist noch einer.  Ich glaube, der sagt, wie gro√ü es ist."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Du**: Okay. Lass uns vorsichtig n√§her gehen."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Du**: Ich glaube, ich habe eine Idee! Daf√ºr muss ich aber\n"
"beide Seiten mit `(n + 1)` multiplizieren.\n"
"\n"
"**Robo**: Da gibt es verschiedene M√∂glichkeiten.  Zum Beispiel:\n"
"`apply nat_mul_inj' (n := n.succ)`!"
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "(*Stimme von oben*) : Der n√§chste Schritt ist `rw [‚Üêsmul_eq_mul, ‚Üê LinearMap.map_smul]`,\n"
"aber das kannst du nicht wissen."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Du**: Das Argument auf der linken Seite kann ich jetzt als konstante Summe\n"
"darstellen.\n"
"\n"
"**Robo**: Probier `trans ¬´{f}¬ª (‚àë x : Fin ¬´{n}¬ª.succ, E ¬´{i}¬ª ¬´{i}¬ª)`."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Du**: Genau, dann m√ºssen wir f√ºr diese erste Gleichheit nur die konstante Summe ausrechnen.\n"
"\n"
"**Robo**: `simp` kann das sicher komplett vereinfachen."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Du**: Als n√§chstes ziehen wir die Funktion in die Summe rein."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Du**: Und jetzt m√∂chte ich die Gleichung durch einen Zwischenschritt\n"
"`‚àë i, f (E i i)` zeigen."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Du**: Nein, das ist jetzt mathematisch falsch!"
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Robo**: Jetzt wieder `congr`-`ext`?\n"
"\n"
"**Du**: Nein, zuerst, die Funktion in die Summe rein, sonst klappt das nicht."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Du**: Nochmals!"
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Du**: Und das war ein Resultat, welches wir auf dem Weg gefunden haben."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Robo**: `eq_on_diag_ebasis` sagt meine Speicherplatte."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "**Robo**: Das sieht nach `ebasis_diag_sum_eq_one` aus."
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "Dieses Theorem sollte eigentlich woanders eingef√ºhrt werden"
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "Dieses Theorem sollte eigentlich woanders eingef√ºhrt werden"
msgstr ""

#: Game.Levels.MatrixTrace.L09_EvalOnEBasis
msgid "Dieses Theorem sollte eigentlich woanders eingef√ºhrt werden"
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "Trace"
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "Ihr schleicht euch langsam an.\n"
"\n"
"**Du** (**fl√ºsternd**): Ich glaube, du hattest Recht.  Diese Zettel sind eine Art Steckbrief!  \n"
"Und sie beschreiben dieses Wesen hier eindeutig!\n"
"\n"
"**Robo**: Wie meinst du das?\n"
"\n"
"**Du**: Schau doch, seine Gr√∂√üe, seine Vorliebe f√ºr Kommutatoren, und all die anderen Sachen,\n"
"damit kann es eindeutig identifiziert werden kann!\n"
"\n"
"**Robo**: Das musst du mir genauer erkl√§ren.\n"
"\n"
"**Du**:  Ich versuch's mal. Gibt es in Leansch einen Namen f√ºr die Spur? \n"
"\n"
"**Robo**: Ja klar, die hei√üt nat√ºrlich `trace`.  Manche Formalosophen nennen sie auch liebevoll Tracy.\n"
"\n"
"Du nimmst einen der Pergamentfetzen und schreibst auf die R√ºckseite."
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Robo**: Tatsache. Du hattest Recht.\n"
"\n"
"Ihr beobachtet voller Entz√ºcken dieses offenbar einzigartige Wesen auf diesem Planeten.\n"
"\n"
"Als ihr n√§her kommt, scheint euch Tracy zu bemerken.  Aber es scheint dadurch keinesfalls gest√∂rt\n"
"zu sein."
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Du**:  Hier sind noch einmal alle Eigenschaften zusammengefasst.  \n"
"\n"
"**Robo**:  Und du behauptest, nur Tracy hat diese Eigenschaften?\n"
"\n"
"**Du**: Ja.  Ich glaube, das ist so.  Jedes `f`, dass diese Eigenschaften hat, verh√§lt sich auch allen Matrizen genauso wie Tracy.  Und deshalb *ist* es Tracy!"
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Robo**: `ext`!"
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Du**: Und jetzt schreiben wir `f A` als Summe von Basiselementen."
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Robo**: Den Fall `n = 0` sehe ich sofort!\n"
"\n"
"**Du**: Wirklich?\n"
"\n"
"**Robo**: Ja, die Spur einer 0√ó0-Matrix ist per Definition `0`. Mach mal `rcases n`.\n"
"\n"
"**Du**: Nicht `induction n`?\n"
"\n"
"**Robo**: Geht auch, aber wir brauchen die Induktionshypothese nicht."
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Robo**: Ich hab im Kopf mal `simp` ausprobiert. Probier es auch mal."
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Du**: Wir hatten doch eben festgestellt, dass `f (E i i) = 1` gilt!\n"
"\n"
"**Robo**: Nachschlagen kann ich gut! Das war `one_on_diag_ebasis`."
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Robo**: Denk daran, unter einer Summe must du `simp_rw` verwenden,\n"
"`rw` kann das nicht.\n"
"\n"
"**Du**: Ah, und die expliziten Argumente `h‚ÇÅ` und `h‚ÇÇ` sollte ich wohl auch noch angeben?"
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Du** `_ * 1` ist `simp`, oder?"
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Robo**: Die beiden Seiten sind per Definition gleich!"
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "**Du**: Wo kommt denn dieses Beweisziel jetzt noch her?\n"
"\n"
"**Robo**: Ganz am Anfang bei `rw [eq_sum_apply_diag_ebasis]` hast du vermutlich dieses Argument\n"
"ausgelassen.  Jetzt kannst du es noch nachholen."
msgstr ""

#: Game.Levels.MatrixTrace.L10_Characterize
msgid "Nicht genau definiert als, aber per Definition √§quivalent zu:\n"
"`trace A = ‚àë i, A i i`.\n"
"\n"
"Mathlib benutzt den Term `diag A i` auf den wir hier nicht genauer eingehen."
msgstr ""

#: Game.Levels.MatrixTrace.L11_Linearity
msgid "Trace"
msgstr ""

#: Game.Levels.MatrixTrace.L11_Linearity
msgid "Als ihr mit etwas Abstand stehen bleibt, kommt Tracy auf euch zugelaufen und f√§ngt an zu spielen. Belustigt gibt es euch verschiedenste\n"
"Aufgaben und Terme, und ihr versucht, diese schnell genug zu kombinieren."
msgstr ""

#: Game.Levels.MatrixTrace.L11_Linearity
msgid "Schlie√ülich macht ihr euch auf den R√ºckweg.\n"
"Ihr verlauft euch sofort, aber Tracy ist euch offenbar gefolgt und f√ºhrt euch quer durch\n"
"die Grasslandschaft zur√ºck zu eurem Schiff."
msgstr ""

#: Game.Levels.MatrixTrace.L11_Linearity
msgid "**Du**: Da geht es gerade offensichtlich um Linearit√§t der Spur von Matrizen."
msgstr ""

#: Game.Levels.MatrixTrace.L11_Linearity
msgid "**Robo**: Dieser letzte Schritt ist `Fintype.card_fin`. Das ginge auch alles\n"
"mit `simp` wenn wir nicht am spielen w√§ren.\n"
"\n"
"**Du**: Ist doch egal, das macht Spass!"
msgstr ""

#: Game.Levels.MatrixTrace.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.MatrixTrace
msgid "Robotswana"
msgstr ""

#: Game.Levels.MatrixTrace
msgid "Ihr landet auf einem warmen Planeten, und tretet auf eine weite Graslandschaft hinaus.\n"
"\n"
"Nach etwas Umschauen entdeckt Robo Spuren, die von eurem Landeplatz wegf√ºhren, zwischen\n"
" vereinzelten B√§umen hindurch. Ihr beratet kurz und beschlie√üt, den Spuren zu folgen."
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "Cantor's Diagonalargument"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Cantor**: Wusstet ihr dass es keine surjektiven Funktionen `f : A ‚Üí Set A` gibt? Faszinierend\n"
"oder? Wie das geht? Nehmt doch einmal die Menge `C := { a | a ‚àâ f a }`. Wenn `f` surjektiv w√§re,\n"
"welches `a : A` w√ºrde diese Menge als Bildpunkt haben? Hier, ich gebe euch einfach `C` auch\n"
"schon mit!\n"
"\n"
"[Tipp: `unfold_let` ist wie `unfold` und wird zuk√ºnftig in Lean zusammengef√ºhrt.\n"
"Brauche `unfold_let C` wenn eine lokale Definition in deinen Annahmen ist. Alternativ\n"
"funktionert auch `simp [C]`.]"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Du**: Uff. Aber ehrlich habe ich die das \"Diagonale\" daran noch nicht\n"
"ganz gesehen.\n"
"\n"
"\n"
"**Cantor**: Nat√ºrlich, das kann ich euch zeigen, aber da muss ich etwas ausholen‚Ä¶"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Du**: Also ein Widerspruchsbeweis?"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Du**: Und jetzt existiert durch Surjektivit√§t ein Urbild von `¬´{C}¬ª`.\n"
"\n"
"**Cantor**: Genau! Und dann √ºberlegt euch, ob `b ‚àà f b` ist oder nicht f√ºr\n"
"dieses Urbild `b`!"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Robo**: Das machen wir glaubs am besten mit `by_cases`."
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Du**: Jetzt will ich ja auch noch `¬´{b}¬ª ‚àâ ¬´{f}¬ª ¬´{b}¬ª` zeigen f√ºr den Widerspruch.\n"
"\n"
"**Robo**: Dann sag doch `suffices hn : ¬´{b}¬ª ‚àâ ¬´{f}¬ª ¬´{b}¬ª`, erinnerst du dich?"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Robo**: Und noch den Fall wenn `¬´{b}¬ª ‚àâ ¬´{f}¬ª ¬´{b}¬ª`"
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid "Fixpunkte"
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid "**Du**: Also wie ist das mit der Diagonalen?\n"
"\n"
"**Cantor**: Um das genauer zu erl√§utern muss ich euch zuerst ein paar r√§tsel zu Fixpunkten stellen."
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid "**Robo**: `IsFixedPt f x` ist die Aussage `f x = x`.\n"
"\n"
"**Du**: Und `abs` ist der Betrag? Was mache ich damit?\n"
"\n"
"**Robo**: Ich denke so einfache Sachen, die `0` beinhalten kann `simp` ganz gut,\n"
"aber ich habe hier auch noch zwei Resultate, die hilfreich aussehen."
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid ""
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid ""
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid "Fixpunkt"
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid "**Cantor**: Oder schaut hier, die Menge der Fixpunkte von `-(¬∑)` ist ein Singleton."
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid "**Du**: `fixedPoints f` ist dann wohl die Menge aller Fixpunkte?\n"
"\n"
"**Robo**: Ja, genau: `fixedPoints f := { x | IsFixedPt f x }`.\n"
"\n"
"**Du**: Welche Optionen habe ich nochmals bei Gleichungen von Mengen?\n"
"\n"
"**Robo** Entweder du brauchst `ext x` um `x ‚àà A ‚Üî x ‚àà B` zu zeigen, oder\n"
"du ben√ºtzt `rw [Subset.antisymm_iff]` um dann `A ‚äÜ B ‚àß B ‚äÜ A` zu zeigen."
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid ""
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid ""
msgstr ""

#: Game.Levels.Cantor.L04_IsFixedPt_not
msgid "Keine Fixpunkte"
msgstr ""

#: Game.Levels.Cantor.L04_IsFixedPt_not
msgid "**Cantor**: Aber auf was ich eigentlich hinaus wollte, ist die Fixpunkte von `¬¨` anzuschauen;\n"
"Es gibt n√§mlich keine!"
msgstr ""

#: Game.Levels.Cantor.L04_IsFixedPt_not
msgid "**Du**: Und was hatten jetzt Fixpunkte mit dem Diagonalargument zu tun?\n"
"\n"
"**Cantor**: Nur Geduld! Ich habe gerade so viel Spa√ü!"
msgstr ""

#: Game.Levels.Cantor.L04_IsFixedPt_not
msgid "**Du**: Ja, `¬¨(¬∑)` hat keinen Fixpunkt, keine Aussage kann gleichzeitig\n"
"wahr und falsch sein!"
msgstr ""

#: Game.Levels.Cantor.L05_IsFixedPt_odd
msgid "Fixpunkte"
msgstr ""

#: Game.Levels.Cantor.L05_IsFixedPt_odd
msgid "**Cantor**: Zum Beispiel bei ungeraden Funktionen. Da sind die Fixpunkte symmetrisch.\n"
"\n"
"**Du** (*fl√ºsternd zu Robo*): Das hat jetzt wirklich nichts mehr mit der urspr√ºnglichen\n"
"Frage zu tun\n"
"\n"
"**Robo** (*leise*): Na komm schon, wir kommen bestimmt gleich dazu."
msgstr ""

#: Game.Levels.Cantor.L06_idempotent
msgid "Idempotent"
msgstr ""

#: Game.Levels.Cantor.L06_idempotent
msgid "**Cantor**: Also noch ein letztes R√§tsel, dann kommen wir gleich zur√ºck zum\n"
"Diagonalargument.\n"
"\n"
"**Robo**: Oh das sieht anspruchsvoller aus."
msgstr ""

#: Game.Levels.Cantor.L06_idempotent
msgid "**Du**: Etwas womit ich unsicher bin, wie spielt da wohl `¬´{f}¬ª ‚àò ¬´{f}¬ª = ¬´{f}¬ª` mit rein?\n"
"\n"
"**Robo**: Vermutlich willst du das irgendwann auf ein bestimmtes `x` anwenden.\n"
"\n"
"Daf√ºr kannst du irgendwann `apply congr_fun at ¬´{h}¬ª` brauchen, damit\n"
"du `‚àÄ x, (¬´{f}¬ª ‚àò ¬´{f}¬ª) x = ¬´{f}¬ª x` kriegst."
msgstr ""

#: Game.Levels.Cantor.L06_idempotent
msgid "**Robo**: Wir hatten einmal `Function.comp_apply`!"
msgstr ""

#: Game.Levels.Cantor.L06_idempotent
msgid ""
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag_IsFixedPt
msgid "Diagonalargument"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag_IsFixedPt
msgid "**Cantor**: Genug ger√§tselt, jetzt aber zum Diagonalargument. Wenn wir eine surjektive\n"
"Funktion `f : A ‚Üí (A ‚Üí Y)` haben, dann hat jede Funktion `s : A ‚Üí A` einen Fixpunkt.\n"
"\n"
"**Du**: Und welcher Punkt ist das?\n"
"\n"
"**Cantor**: Gute Frage! Hier, ich geb euch eine Aufgabe um das herauszufinden."
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag_IsFixedPt
msgid "**Cantor**: Diese Aufgabe soll euch vermitteln, wie ihr den Fixpunkt kriegt!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag_IsFixedPt
msgid "**Du**: Also ist der Fixpunkt dieses diagonale Element `f b b`, f√ºr ein `b`\n"
"  das irgendwie aus der Surjektivit√§t kommt‚Ä¶\n"
"\n"
"  **Cantor**: Und damit auf zum Hauptsatz!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "Diagonalargument"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Cantor**: Viel Gl√ºck!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Du**: Jetzt m√∂chte ich aber mit dieser generellen Form, die urspr√ºngliche\n"
"Aufgabe nochmals l√∂sen."
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Cantor**: Mit der Aufgabe vorhin k√∂nnt\n"
"ihr sicher herausfinden, was das richtige `c : A ‚Üí Y` ist, auf das ihr die Surjektivit√§t\n"
"anwenden wollt."
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Robo**: So viel weiss ich: die Funktion\n"
"definieren wir mit\n"
"\n"
"```\n"
"let c : A ‚Üí Y := fun a ‚Ü¶ _\n"
"```\n"
"\n"
"aber den Wert musst schon du herausfinden!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Cantor**: Gute Wahl!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Cantor**: Das sieht gut aus, jetzt k√∂nnen wir ja\n"
"`cantor_diagonal_isFixedPt` von vorhin brauchen!"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "Diagonalargument"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Du**: Und wie h√§ngt das jetzt damit zusammen, dass es keine Surjektive Funktion\n"
"`f : A ‚Üí Set A` gibt?\n"
"\n"
"**Cantor**: Ganz einfach, nehmt `s` als die Funktion `fun x ‚Ü¶ ¬¨ x`.\n"
"\n"
"**Robo**: In Lean kann man n√§mlich eine Menge `U : Set A` mit dem Pr√§dikat\n"
"`{ x : A | x ‚àà U } : A ‚Üí Prop` gleichsetzen, die sind per Definition dasselbe.\n"
"Damit kann man `f : A ‚Üí Set A` auch als `f : A ‚Üí A ‚Üí Prop` sehen.\n"
"\n"
"**Du**: Und `{ a | a ‚àâ f a }` ist `s (f a a)` f√ºr `s : (fun x ‚Ü¶ ¬¨ x)`, alles klar."
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Cantor**: Ein Widerspruchsbeweis ist die K√ºr der Mathematik."
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Du**: Also hier jetzt `cantor_diagonal` verwenden?"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Robo**: Zum Beispiel mit `apply cantor_diagonal at ¬´{h}¬ª`!"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Cantor**: Nein, nein! Wir wollten doch\n"
"mein sch√∂nes Theorem `cantor_diagonal` verwenden!"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Cantor**: Wir hatten doch ge√ºbt, dass `¬¨(¬∑)` keinen Fixpunkt hat.\n"
"\n"
"**Robo**: Das habe ich als `not_isFixedPt_not` gepspeichert"
msgstr ""

#: Game.Levels.Cantor
msgid "Cantor"
msgstr ""

#: Game.Levels.Cantor
msgid "Auf eurer Reise kommt ihr an einem Zwergplaneten vorbei. Darauf steht ein Haus mit unendlich vielen\n"
"T√ºren auf jeder Seite. Ihr macht euch einen Spass daran von einem Ecken aus gleichzeitig T√ºren\n"
"aufzutun und zu beobachten wie sich dein Schatten mit dem von Robo kreuzt.\n"
"\n"
"Dann entdeckt ihr einen Mann, der draussen sitzt. In der Hand h√§lt er eine Schriftrolle\n"
"auf der unendliche Zahlenfolgen geschrieben sind, und die Rolle scheint in einem riesigen\n"
"Haufen ausgerolltem Papier zu enden.\n"
"\n"
"Die Person stellt sich euch als Cantor der Magier vor."
msgstr ""

#: Game
msgid "Robo"
msgstr ""

#: Game
msgid "# Game Over oder QED?\n"
"\n"
"Willkommen zu unserem Prototyp eines Lean4-Lernspiels. Hier lernst du computer-gest√ºtzte\n"
"Beweisf√ºhrung. Das Interface ist etwas vereinfacht, aber wenn du den *Editor Mode* aktivierst, f√ºhlt es sich\n"
"fast genauso an wie in VSCode, der Standard-IDE f√ºr Lean.\n"
"\n"
"Rechts siehst du eine √úbersicht. Das Spiel besteht aus mehreren Planeten, und jeder Planet hat mehrere Levels,\n"
"die in Form von grauen Punkten dargestellt sind. Gel√∂ste Levels werden gr√ºn.\n"
"\n"
"Klicke auf den ersten Planeten *Logo*, um deine Reise zu starten.\n"
"\n"
"\n"
"### More\n"
"Schau im Men√º unter \"Game Info\" f√ºr mehr Informationen zum Spiel."
msgstr ""

#: Game
msgid "## Spielstand\n"
"\n"
"Dein Spielstand wird lokal in deinem Browser als *site data* gespeichert.\n"
"Solltest du diese l√∂schen, verlierst du deinen Spielstand!\n"
"Viele Browser l√∂schen *site data* und *cookies* zusammen.\n"
"Wenn du \"Game rules: lax\" ausw√§hlst kannst aber jederzeit jedes Level spielen,\n"
"auch wenn du vorhergende Levels noch nicht gel√∂st hast.\n"
"\n"
"## Funding\n"
"\n"
"Dieses Lernspiel wurde und wird im Rahmen des Projekts\n"
"[ADAM: Anticipating the Digital Age of Mathematics](https://hhu-adam.github.io/)\n"
"an der Heinrich-Heine-Universit√§t D√ºsseldorf entwickelt.\n"
"Es wird finanziert durch das Programm *Freiraum 2022* der\n"
"*Stiftung Innovation in der Hochschullehre*.\n"
"\n"
"## Credits\n"
"\n"
"* **Creators:** Jon Eugster, Alexander Bentkamp, Marcus Zibrowius, Sina Hazratpour\n"
"* **Game Engine:** Alexander Bentkamp, Jon Eugster, Patrick Massot\n"
"* **Illustrationen:** Du≈°an Pavliƒá\n"
"\n"
"## Kontakt\n"
"\n"
"Das Spiel befindet sich noch in der Entwicklung.\n"
"Wenn du Anregungen hast oder Bugs findest, schreib doch ein Email oder erstelle einen\n"
"Issue auf Github:\n"
"\n"
"* zum Spielinhalt im [Robo repo](https://github.com/hhu-adam/Robo/issues).\n"
"* zum Spielserver im [lean4game repo](https://github.com/leanprover-community/lean4game/issues).\n"
"\n"
"Kontakt: [Jon Eugster](https://www.math.hhu.de/lehrstuehle-/-personen-/-ansprechpartner/innen/lehrstuehle-des-mathematischen-instituts/lehrstuhl-fuer-algebraische-geometrie/team/jon-eugster)"
msgstr ""

#: Game
msgid "Fertig!"
msgstr ""

#: Game
msgid "Erkunde das Leansche Universum mit deinem Robo, welcher dir bei der Verst√§ndigung mit den Formalosophen zur Seite steht."
msgstr ""

#: Game
msgid "Dieses Spiel f√ºhrt die Grundlagen zur Beweisf√ºhrung in Lean ein und schneidet danach verschiedene Bereiche des Bachelorstudiums an.\n"
"\n"
"(Das Spiel befindet sich noch in der Entstehungsphase.)"
msgstr ""
